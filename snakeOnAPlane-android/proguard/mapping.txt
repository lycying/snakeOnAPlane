aurelienribon.tweenengine.BaseTween -> a.a.a:
    int step -> m
    int repeatCnt -> n
    boolean isIterationStep -> o
    boolean isYoyo -> p
    float delay -> a
    float duration -> b
    float repeatDelay -> c
    float currentTime -> d
    boolean isStarted -> e
    boolean isInitialized -> f
    boolean isFinished -> g
    boolean isKilled -> h
    boolean isPaused -> i
    aurelienribon.tweenengine.TweenCallback callback -> q
    int callbackTriggers -> r
    java.lang.Object userData -> s
    boolean isAutoRemoveEnabled -> j
    boolean isAutoStartEnabled -> k
    boolean $assertionsDisabled -> l
    void reset() -> a
    java.lang.Object build() -> b
    java.lang.Object start() -> c
    java.lang.Object start(aurelienribon.tweenengine.TweenManager) -> a
    void kill() -> d
    void free() -> e
    java.lang.Object repeatYoyo$42867e20() -> f
    java.lang.Object setCallback(aurelienribon.tweenengine.TweenCallback) -> a
    int getRepeatCount() -> g
    float getFullDuration() -> h
    boolean isFinished() -> i
    void forceStartValues() -> j
    void forceEndValues() -> k
    void initializeOverride() -> l
    void computeOverride(int,int,float) -> a
    void forceToStart() -> m
    void forceToEnd(float) -> a
    void callCallback(int) -> d
    boolean isYoyo(int) -> a
    void forceStartValues(int) -> b
    void forceEndValues(int) -> c
    void update(float) -> b
    void updateStep() -> n
    boolean isValid(int) -> e
aurelienribon.tweenengine.Pool -> a.a.b:
    java.util.ArrayList objects -> a
    aurelienribon.tweenengine.Pool$Callback callback -> b
    java.lang.Object create() -> a
    java.lang.Object get() -> b
    void free(java.lang.Object) -> a
aurelienribon.tweenengine.Pool$Callback -> a.a.c:
    void onPool(java.lang.Object) -> a
aurelienribon.tweenengine.Timeline -> a.a.d:
    aurelienribon.tweenengine.Pool$Callback poolCallback -> n
    aurelienribon.tweenengine.Pool pool -> m
    java.util.List children -> o
    aurelienribon.tweenengine.Timeline current -> p
    aurelienribon.tweenengine.Timeline parent -> q
    aurelienribon.tweenengine.Timeline$Modes mode -> r
    boolean isBuilt -> s
    int[] $SWITCH_TABLE$aurelienribon$tweenengine$Timeline$Modes -> t
    aurelienribon.tweenengine.Timeline createSequence() -> n
    aurelienribon.tweenengine.Timeline createParallel() -> o
    void reset() -> a
    void setup(aurelienribon.tweenengine.Timeline$Modes) -> a
    aurelienribon.tweenengine.Timeline push(aurelienribon.tweenengine.Tween) -> a
    aurelienribon.tweenengine.Timeline beginParallel() -> p
    aurelienribon.tweenengine.Timeline end() -> q
    void free() -> e
    void initializeOverride() -> l
    void computeOverride(int,int,float) -> a
    void forceStartValues() -> j
    void forceEndValues() -> k
    java.lang.Object build() -> b
    java.lang.Object start() -> c
    int[] $SWITCH_TABLE$aurelienribon$tweenengine$Timeline$Modes() -> r
aurelienribon.tweenengine.Timeline$1 -> a.a.e:
    void onPool(java.lang.Object) -> a
aurelienribon.tweenengine.Timeline$2 -> a.a.f:
    java.lang.Object create() -> a
aurelienribon.tweenengine.Timeline$Modes -> a.a.g:
    aurelienribon.tweenengine.Timeline$Modes SEQUENCE -> a
    aurelienribon.tweenengine.Timeline$Modes PARALLEL -> b
    aurelienribon.tweenengine.Timeline$Modes[] ENUM$VALUES -> c
    aurelienribon.tweenengine.Timeline$Modes[] values() -> values
    aurelienribon.tweenengine.Timeline$Modes valueOf(java.lang.String) -> valueOf
aurelienribon.tweenengine.Tween -> a.a.h:
    int combinedAttrsLimit -> m
    int waypointsLimit -> n
    float[] accessorBuffer -> o
    float[] pathBuffer -> p
    aurelienribon.tweenengine.Pool$Callback poolCallback -> q
    aurelienribon.tweenengine.Pool pool -> r
    java.util.Map registeredAccessors -> s
    java.lang.Object target -> t
    java.lang.Class targetClass -> u
    aurelienribon.tweenengine.TweenAccessor accessor -> v
    int type -> w
    aurelienribon.tweenengine.TweenEquation equation -> x
    aurelienribon.tweenengine.TweenPath path -> y
    boolean isFrom -> z
    boolean isRelative -> A
    int combinedAttrsCnt -> B
    int waypointsCnt -> C
    float[] startValues -> D
    float[] targetValues -> E
    float[] waypoints -> F
    void registerAccessor(java.lang.Class,aurelienribon.tweenengine.TweenAccessor) -> a
    aurelienribon.tweenengine.Tween to(java.lang.Object,int,float) -> a
    void reset() -> a
    java.lang.Class findTargetClass() -> n
    aurelienribon.tweenengine.Tween target(float) -> c
    aurelienribon.tweenengine.Tween target(float,float) -> a
    aurelienribon.tweenengine.Tween target$7e1a6325(float,float) -> b
    void free() -> e
    void initializeOverride() -> l
    void computeOverride(int,int,float) -> a
    void forceStartValues() -> j
    void forceEndValues() -> k
    java.lang.Object build() -> b
aurelienribon.tweenengine.Tween$1 -> a.a.i:
    void onPool(java.lang.Object) -> a
aurelienribon.tweenengine.Tween$2 -> a.a.j:
    java.lang.Object create() -> a
aurelienribon.tweenengine.TweenAccessor -> a.a.k:
    int getValues(java.lang.Object,int,float[]) -> a
    void setValues(java.lang.Object,int,float[]) -> b
aurelienribon.tweenengine.TweenCallback -> a.a.l:
    void onEvent$7fab59b3() -> a
aurelienribon.tweenengine.TweenEquation -> a.a.m:
    float compute$4098371b(float,float) -> a
aurelienribon.tweenengine.TweenManager -> a.a.n:
    java.util.ArrayList objects -> a
    boolean isPaused -> b
    aurelienribon.tweenengine.TweenManager add(aurelienribon.tweenengine.BaseTween) -> a
    void killAll() -> a
    void pause() -> b
    void resume() -> c
    void update(float) -> a
aurelienribon.tweenengine.TweenPath -> a.a.o:
    float compute(float,float[],int) -> a
aurelienribon.tweenengine.TweenPaths -> a.a.p:
    aurelienribon.tweenengine.paths.Linear linear -> a
    aurelienribon.tweenengine.paths.CatmullRom catmullRom -> b
aurelienribon.tweenengine.equations.Quad -> a.a.a.a:
    aurelienribon.tweenengine.equations.Quad IN -> a
    aurelienribon.tweenengine.equations.Quad OUT -> b
    aurelienribon.tweenengine.equations.Quad INOUT -> c
aurelienribon.tweenengine.equations.Quad$1 -> a.a.a.b:
    float compute$4098371b(float,float) -> a
    java.lang.String toString() -> toString
aurelienribon.tweenengine.equations.Quad$2 -> a.a.a.c:
    float compute$4098371b(float,float) -> a
    java.lang.String toString() -> toString
aurelienribon.tweenengine.equations.Quad$3 -> a.a.a.d:
    float compute$4098371b(float,float) -> a
    java.lang.String toString() -> toString
aurelienribon.tweenengine.paths.CatmullRom -> a.a.b.a:
    float compute(float,float[],int) -> a
    float catmullRomSpline(float,float,float,float,float) -> a
aurelienribon.tweenengine.paths.Linear -> a.a.b.b:
    float compute(float,float[],int) -> a
com.badlogic.gdx.Application -> com.badlogic.gdx.a:
    com.badlogic.gdx.Graphics getGraphics() -> a
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void debug(java.lang.String,java.lang.String) -> b
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    long getJavaHeap() -> c
    long getNativeHeap() -> d
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    void postRunnable(java.lang.Runnable) -> a
com.badlogic.gdx.Application$ApplicationType -> com.badlogic.gdx.b:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType Applet -> c
    com.badlogic.gdx.Application$ApplicationType WebGL -> d
    com.badlogic.gdx.Application$ApplicationType iOS -> e
    com.badlogic.gdx.Application$ApplicationType[] ENUM$VALUES -> f
    com.badlogic.gdx.Application$ApplicationType[] values() -> values
    com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.ApplicationAdapter -> com.badlogic.gdx.c:
    void create() -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
    void resume() -> d
    void dispose() -> e
com.badlogic.gdx.ApplicationListener -> com.badlogic.gdx.d:
    void create() -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
    void resume() -> d
    void dispose() -> e
com.badlogic.gdx.Audio -> com.badlogic.gdx.e:
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.Files -> com.badlogic.gdx.f:
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.Files$FileType -> com.badlogic.gdx.g:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] ENUM$VALUES -> f
    com.badlogic.gdx.Files$FileType[] values() -> values
    com.badlogic.gdx.Files$FileType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Gdx -> com.badlogic.gdx.h:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.graphics.GLCommon gl -> f
    com.badlogic.gdx.graphics.GL10 gl10 -> g
    com.badlogic.gdx.graphics.GL11 gl11 -> h
    com.badlogic.gdx.graphics.GL20 gl20 -> i
    com.badlogic.gdx.graphics.GLU glu -> j
com.badlogic.gdx.Graphics -> com.badlogic.gdx.i:
    boolean isGL11Available() -> a
    boolean isGL20Available() -> b
    com.badlogic.gdx.graphics.GL11 getGL11() -> c
    com.badlogic.gdx.graphics.GL20 getGL20() -> d
    int getWidth() -> e
    int getHeight() -> f
    float getDeltaTime() -> g
    int getFramesPerSecond() -> h
    boolean supportsExtension(java.lang.String) -> a
    void requestRendering() -> i
com.badlogic.gdx.Graphics$BufferFormat -> com.badlogic.gdx.j:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$DisplayMode -> com.badlogic.gdx.k:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.Input -> com.badlogic.gdx.l:
    boolean isTouched$134632() -> a
    boolean isButtonPressed(int) -> a
    long getCurrentEventTime() -> b
    void setCatchBackKey$1385ff() -> c
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    com.badlogic.gdx.InputProcessor getInputProcessor() -> d
com.badlogic.gdx.Input$Orientation -> com.badlogic.gdx.m:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation Portrait -> b
    com.badlogic.gdx.Input$Orientation[] ENUM$VALUES -> c
    com.badlogic.gdx.Input$Orientation[] values() -> values
    com.badlogic.gdx.Input$Orientation valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Input$TextInputListener -> com.badlogic.gdx.n:
com.badlogic.gdx.InputAdapter -> com.badlogic.gdx.o:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputMultiplexer -> com.badlogic.gdx.p:
    com.badlogic.gdx.utils.Array processors -> a
    void addProcessor(com.badlogic.gdx.InputProcessor) -> a
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputProcessor -> com.badlogic.gdx.q:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.Preferences -> com.badlogic.gdx.r:
    void putString(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    void flush() -> a
com.badlogic.gdx.Version -> com.badlogic.gdx.s:
    java.lang.String VERSION -> a
com.badlogic.gdx.assets.AssetDescriptor -> com.badlogic.gdx.a.a:
    java.lang.String fileName -> a
    java.lang.Class type -> b
    com.badlogic.gdx.assets.AssetLoaderParameters params -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.badlogic.gdx.a.b:
com.badlogic.gdx.assets.AssetLoaderParameters -> com.badlogic.gdx.a.c:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> a
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.badlogic.gdx.a.d:
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
com.badlogic.gdx.assets.AssetLoadingTask -> com.badlogic.gdx.a.e:
    com.badlogic.gdx.assets.AssetManager manager -> a
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> b
    com.badlogic.gdx.assets.loaders.AssetLoader loader -> c
    java.util.concurrent.ExecutorService threadPool -> d
    long startTime -> e
    boolean asyncDone -> f
    boolean dependenciesLoaded -> g
    com.badlogic.gdx.utils.Array dependencies -> h
    java.util.concurrent.Future depsFuture -> i
    java.util.concurrent.Future loadFuture -> j
    java.lang.Object asset -> k
    int ticks -> l
    boolean cancel -> m
    boolean update() -> a
    java.lang.Object getAsset() -> b
    java.lang.Object call() -> call
com.badlogic.gdx.assets.AssetManager -> com.badlogic.gdx.a.f:
    com.badlogic.gdx.utils.ObjectMap assets -> a
    com.badlogic.gdx.utils.ObjectMap assetTypes -> b
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> c
    com.badlogic.gdx.utils.ObjectMap loaders -> d
    com.badlogic.gdx.utils.Array loadQueue -> e
    java.util.concurrent.ExecutorService threadPool -> f
    java.util.Stack tasks -> g
    com.badlogic.gdx.assets.AssetErrorListener listener -> h
    int loaded -> i
    int toLoad -> j
    com.badlogic.gdx.utils.Logger log -> k
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    void unload(java.lang.String) -> a
    java.lang.String getAssetFileName(java.lang.Object) -> a
    boolean isLoaded(java.lang.String) -> c
    void load(java.lang.String,java.lang.Class) -> b
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    boolean update() -> a
    void finishLoading() -> b
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> a
    void incrementRefCountedDependencies(java.lang.String) -> d
    void handleTaskError(java.lang.Throwable) -> a
    void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader) -> a
    float getProgress() -> c
    void dispose() -> d
    void clear() -> e
    int getReferenceCount(java.lang.String) -> b
    void setReferenceCount(java.lang.String,int) -> a
com.badlogic.gdx.assets.AssetManager$1 -> com.badlogic.gdx.a.g:
    com.badlogic.gdx.assets.AssetManager this$0 -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.badlogic.gdx.assets.RefCountedContainer -> com.badlogic.gdx.a.h:
    java.lang.Object object -> a
    int refCount -> b
    void incRefCount() -> a
com.badlogic.gdx.assets.loaders.AssetLoader -> com.badlogic.gdx.a.a.a:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.badlogic.gdx.a.a.b:
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.BitmapFontLoader -> com.badlogic.gdx.a.a.c:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter -> com.badlogic.gdx.a.a.d:
    boolean flip -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter minFitler -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter maxFilter -> d
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData bitmapFontData -> e
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.badlogic.gdx.a.a.e:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.MusicLoader -> com.badlogic.gdx.a.a.f:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.PixmapLoader -> com.badlogic.gdx.a.a.g:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader -> com.badlogic.gdx.a.a.h:
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter -> com.badlogic.gdx.a.a.i:
    java.lang.String textureAtlasPath -> b
com.badlogic.gdx.assets.loaders.SoundLoader -> com.badlogic.gdx.a.a.j:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.badlogic.gdx.a.a.k:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader -> com.badlogic.gdx.a.a.l:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData data -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter -> com.badlogic.gdx.a.a.m:
    boolean flip -> b
com.badlogic.gdx.assets.loaders.TextureLoader -> com.badlogic.gdx.a.a.n:
    com.badlogic.gdx.graphics.TextureData data -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.badlogic.gdx.a.a.o:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.graphics.TextureData textureData -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> i
com.badlogic.gdx.assets.loaders.TileAtlasLoader -> com.badlogic.gdx.a.a.p:
    void loadAsync$4de814fd(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TileAtlasLoader$TileAtlasParameter -> com.badlogic.gdx.a.a.q:
    java.lang.String tileMapFile -> b
com.badlogic.gdx.assets.loaders.TileMapRendererLoader -> com.badlogic.gdx.a.a.r:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TileMapRendererLoader$TileMapParameter -> com.badlogic.gdx.a.a.s:
    java.lang.String imageDirectory -> b
    int tilesPerBlockX -> c
    int tilesPerBlockY -> d
    float unitsPerTileX -> e
    float unitsPerTileY -> f
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver -> com.badlogic.gdx.a.a.a.a:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.audio.Music -> com.badlogic.gdx.b.a:
    void play() -> a
    boolean isPlaying() -> b
    void setLooping$1385ff() -> c
    void setVolume(float) -> a
    void dispose() -> d
com.badlogic.gdx.audio.Sound -> com.badlogic.gdx.b.b:
    long play(float) -> a
    void dispose() -> d
com.badlogic.gdx.backends.android.AndroidApplication -> com.badlogic.gdx.backends.android.AndroidApplication:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.ApplicationListener listener -> e
    android.os.Handler handler -> f
    boolean firstResume -> g
    com.badlogic.gdx.utils.Array runnables -> h
    com.badlogic.gdx.utils.Array executedRunnables -> i
    android.os.PowerManager$WakeLock wakeLock -> j
    int logLevel -> k
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.Graphics getGraphics() -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    long getJavaHeap() -> c
    long getNativeHeap() -> d
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> a
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void debug(java.lang.String,java.lang.String) -> b
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.badlogic.gdx.backends.android.a:
    boolean useGL20 -> a
    int r -> b
    int g -> c
    int b -> d
    int a -> e
    int depth -> f
    int stencil -> g
    int numSamples -> h
    boolean useAccelerometer -> i
    boolean useCompass -> j
    int touchSleepTime -> k
    boolean useWakelock -> l
    int maxSimultaniousSounds -> m
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> n
com.badlogic.gdx.backends.android.AndroidAudio -> com.badlogic.gdx.backends.android.b:
    android.media.SoundPool soundPool -> b
    android.media.AudioManager manager -> c
    java.util.List musics -> a
    void pause() -> a
    void resume() -> b
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.badlogic.gdx.backends.android.c:
    android.content.res.AssetManager assets -> a
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
    com.badlogic.gdx.files.FileHandle[] list() -> c
    boolean isDirectory() -> d
    boolean exists() -> e
    long length() -> f
com.badlogic.gdx.backends.android.AndroidFiles -> com.badlogic.gdx.backends.android.d:
    java.lang.String sdcard -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.backends.android.AndroidGL10 -> com.badlogic.gdx.backends.android.e:
    javax.microedition.khronos.opengles.GL10 gl -> a
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClientActiveTexture(int) -> a
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> b
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> c
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    java.lang.String glGetString(int) -> glGetString
    void glLoadIdentity() -> a
    void glMatrixMode(int) -> d
    void glNormalPointer$4dfa77fc(int,java.nio.Buffer) -> a
    void glPixelStorei(int,int) -> glPixelStorei
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glScissor(int,int,int,int) -> glScissor
    void glTexCoordPointer$5efd7755(int,int,java.nio.Buffer) -> a
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glVertexPointer$5efd7755(int,int,java.nio.Buffer) -> b
    void glLoadMatrixf$49651d03(float[]) -> a
com.badlogic.gdx.backends.android.AndroidGL11 -> com.badlogic.gdx.backends.android.f:
    javax.microedition.khronos.opengles.GL11 gl -> b
    void glBindBuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData$5efd7755(int,int,java.nio.Buffer) -> c
    void glDeleteBuffers$63f29576(java.nio.IntBuffer) -> a
    void glGenBuffers$63f29576(java.nio.IntBuffer) -> b
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer$4868d30e(int,int) -> b
    void glTexCoordPointer$3b4dfe4b(int,int,int) -> a
    void glVertexPointer$3b4dfe4b(int,int,int) -> b
    void glDrawElements$3b4dfe4b$4868d30e(int) -> e
com.badlogic.gdx.backends.android.AndroidGL20 -> com.badlogic.gdx.backends.android.AndroidGL20:
    void init() -> init
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glClear(int) -> glClear
    void glCompileShader(int) -> glCompileShader
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    java.lang.String glGetString(int) -> glGetString
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glPixelStorei(int,int) -> glPixelStorei
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glScissor(int,int,int,int) -> glScissor
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.backends.android.AndroidGLU -> com.badlogic.gdx.backends.android.g:
com.badlogic.gdx.backends.android.AndroidGraphics -> com.badlogic.gdx.backends.android.h:
    android.view.View view -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.backends.android.AndroidApplication app -> d
    com.badlogic.gdx.graphics.GLCommon gl -> e
    com.badlogic.gdx.graphics.GL10 gl10 -> f
    com.badlogic.gdx.graphics.GL11 gl11 -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    com.badlogic.gdx.graphics.GLU glu -> i
    javax.microedition.khronos.egl.EGLContext eglContext -> j
    java.lang.String extensions -> k
    long lastFrameTime -> s
    float deltaTime -> t
    long frameStart -> u
    int frames -> v
    int fps -> w
    com.badlogic.gdx.math.WindowedMean mean -> x
    boolean created -> l
    boolean running -> m
    boolean pause -> n
    boolean resume -> o
    boolean destroy -> p
    float ppiX -> y
    float ppiY -> z
    float ppcX -> A
    float ppcY -> B
    float density -> C
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> D
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> E
    boolean isContinuous -> F
    int[] value -> q
    java.lang.Object synch -> r
    void setPreserveContext(android.view.View) -> a
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> q
    void updatePpi() -> r
    com.badlogic.gdx.graphics.GL11 getGL11() -> c
    com.badlogic.gdx.graphics.GL20 getGL20() -> d
    int getHeight() -> f
    int getWidth() -> e
    boolean isGL11Available() -> a
    boolean isGL20Available() -> b
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    int getAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
    void resume() -> j
    void pause() -> k
    void destroy() -> l
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> g
    int getFramesPerSecond() -> h
    void clearManagedCaches() -> m
    android.view.View getView() -> n
    com.badlogic.gdx.Graphics$DisplayMode getDesktopDisplayMode() -> o
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> p
    void requestRendering() -> i
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> com.badlogic.gdx.backends.android.i:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy val$resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> com.badlogic.gdx.backends.android.j:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> e
com.badlogic.gdx.backends.android.AndroidInput -> com.badlogic.gdx.backends.android.k:
    com.badlogic.gdx.utils.Pool usedKeyEvents -> a
    com.badlogic.gdx.utils.Pool usedTouchEvents -> b
    java.util.ArrayList keyEvents -> c
    java.util.ArrayList touchEvents -> d
    int[] touchX -> e
    int[] touchY -> f
    int[] deltaX -> g
    int[] deltaY -> h
    boolean[] touched -> i
    int[] realId -> j
    boolean hasMultitouch -> k
    com.badlogic.gdx.utils.IntMap keys -> r
    android.hardware.SensorManager manager -> s
    boolean accelerometerAvailable -> l
    float[] accelerometerValues -> t
    java.lang.String text -> u
    com.badlogic.gdx.Input$TextInputListener textListener -> v
    android.os.Handler handle -> w
    com.badlogic.gdx.backends.android.AndroidApplication app -> m
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> x
    int sleepTime -> y
    boolean catchBack -> z
    boolean catchMenu -> A
    android.os.Vibrator vibrator -> B
    boolean compassAvailable -> C
    boolean keyboardAvailable -> n
    float[] magneticFieldValues -> D
    float azimuth -> E
    float pitch -> F
    float roll -> G
    float inclination -> H
    boolean justTouched -> I
    com.badlogic.gdx.InputProcessor processor -> J
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> K
    com.badlogic.gdx.Input$Orientation nativeOrientation -> L
    long currentEventTimeStamp -> M
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard onscreenKeyboard -> N
    android.hardware.SensorEventListener accelerometerListener -> O
    android.hardware.SensorEventListener compassListener -> P
    boolean requestFocus -> o
    float[] R -> p
    float[] orientation -> q
    boolean isTouched$134632() -> a
    boolean isTouched() -> i
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void processEvents() -> e
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void setCatchBackKey$1385ff() -> c
    boolean isButtonPressed(int) -> a
    void registerSensorListeners() -> f
    void unregisterSensorListeners() -> g
    com.badlogic.gdx.InputProcessor getInputProcessor() -> d
    int getFreePointerIndex() -> h
    int lookUpPointerIndex(int) -> b
    long getCurrentEventTime() -> b
com.badlogic.gdx.backends.android.AndroidInput$1 -> com.badlogic.gdx.backends.android.l:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.AndroidInput$2 -> com.badlogic.gdx.backends.android.m:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.badlogic.gdx.backends.android.n:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> e
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.badlogic.gdx.backends.android.o:
    float[] accelerometerValues -> a
    float[] magneticFieldValues -> b
    com.badlogic.gdx.Input$Orientation nativeOrientation -> c
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> d
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.badlogic.gdx.backends.android.p:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int pointer -> e
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> f
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler -> com.badlogic.gdx.backends.android.q:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,long) -> a
    boolean supportsMultitouch(com.badlogic.gdx.backends.android.AndroidApplication) -> a
com.badlogic.gdx.backends.android.AndroidMusic -> com.badlogic.gdx.backends.android.r:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> b
    android.media.MediaPlayer player -> c
    boolean isPrepared -> d
    boolean wasPlaying -> a
    void dispose() -> d
    boolean isPlaying() -> b
    void pause() -> e
    void play() -> a
    void setLooping$1385ff() -> c
    void setVolume(float) -> a
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard -> com.badlogic.gdx.backends.android.s:
    android.content.Context context -> a
    android.os.Handler handler -> b
    com.badlogic.gdx.backends.android.AndroidInput input -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.badlogic.gdx.backends.android.AndroidPreferences -> com.badlogic.gdx.backends.android.t:
    android.content.SharedPreferences sharedPrefs -> a
    android.content.SharedPreferences$Editor editor -> b
    void putString(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    void flush() -> a
com.badlogic.gdx.backends.android.AndroidSingleTouchHandler -> com.badlogic.gdx.backends.android.u:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    void postTouchEvent$36c15ccf(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,long) -> a
    boolean supportsMultitouch(com.badlogic.gdx.backends.android.AndroidApplication) -> a
com.badlogic.gdx.backends.android.AndroidSound -> com.badlogic.gdx.backends.android.v:
    android.media.SoundPool soundPool -> a
    android.media.AudioManager manager -> b
    int soundId -> c
    com.badlogic.gdx.utils.IntArray streamIds -> d
    void dispose() -> d
    long play(float) -> a
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.badlogic.gdx.backends.android.w:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    boolean supportsMultitouch(com.badlogic.gdx.backends.android.AndroidApplication) -> a
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> com.badlogic.gdx.backends.android.a.a:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.badlogic.gdx.backends.android.a.b:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.badlogic.gdx.backends.android.a.c:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.badlogic.gdx.backends.android.a.d:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake -> com.badlogic.gdx.backends.android.a.e:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    java.lang.Object sEglLock -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread mGLThread -> e
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> c
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper mGLWrapper -> d
    int mRenderMode -> f
    android.opengl.GLSurfaceView$Renderer mRenderer -> g
    int mSurfaceWidth -> h
    int mSurfaceHeight -> i
    boolean mHasSurface -> j
    void onMeasure(int,int) -> onMeasure
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> a
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> a
    void setEGLConfigChooser(int,int,int,int,int,int) -> a
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$BaseConfigChooser -> com.badlogic.gdx.backends.android.a.f:
    int[] mConfigSpec -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$ComponentSizeChooser -> com.badlogic.gdx.backends.android.a.g:
    int[] mValue -> h
    int mRedSize -> b
    int mGreenSize -> c
    int mBlueSize -> d
    int mAlphaSize -> e
    int mDepthSize -> f
    int mStencilSize -> g
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper -> com.badlogic.gdx.backends.android.a.h:
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> f
    void start() -> a
    void finish() -> b
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread -> com.badlogic.gdx.backends.android.a.i:
    boolean mDone -> b
    boolean mPaused -> c
    boolean mHasSurface -> d
    int mWidth -> e
    int mHeight -> f
    int mRenderMode -> g
    boolean mRequestRender -> h
    android.opengl.GLSurfaceView$Renderer mRenderer -> i
    java.util.ArrayList mEventQueue -> j
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper mEglHelper -> k
    boolean mSizeChanged -> l
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> a
    void run() -> run
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated() -> b
    void surfaceDestroyed() -> c
    void onPause() -> d
    void onResume() -> e
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> f
    java.lang.Runnable getEvent() -> g
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper -> com.badlogic.gdx.backends.android.a.j:
    javax.microedition.khronos.opengles.GL wrap$40ce139f() -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.a.k:
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.badlogic.gdx.backends.android.a.l:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    boolean mUseGL20 -> h
    int[] mConfigAttribs -> i
    int[] mValue -> j
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.badlogic.gdx.backends.android.a.m:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.badlogic.gdx.backends.android.a.n:
    int width -> a
    int height -> b
com.badlogic.gdx.files.FileHandle -> com.badlogic.gdx.c.a:
    java.io.File file -> b
    com.badlogic.gdx.Files$FileType type -> c
    int[] $SWITCH_TABLE$com$badlogic$gdx$Files$FileType -> a
    java.lang.String path() -> g
    java.lang.String name() -> h
    java.lang.String extension() -> i
    java.lang.String nameWithoutExtension() -> j
    java.lang.String pathWithoutExtension() -> k
    com.badlogic.gdx.Files$FileType type() -> l
    java.io.File file() -> m
    java.io.InputStream read() -> b
    byte[] readBytes() -> n
    com.badlogic.gdx.files.FileHandle[] list() -> c
    boolean isDirectory() -> d
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    boolean exists() -> e
    long length() -> f
    java.lang.String toString() -> toString
    int[] $SWITCH_TABLE$com$badlogic$gdx$Files$FileType() -> o
com.badlogic.gdx.graphics.Camera -> com.badlogic.gdx.graphics.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Matrix4 tmpMat -> o
    com.badlogic.gdx.math.Vector3 tmpVec -> p
    com.badlogic.gdx.math.Vector3 right -> m
    com.badlogic.gdx.math.collision.Ray ray -> n
    void update() -> a
    void lookAt(float,float,float) -> a
    void rotate(float,float,float,float) -> a
    void translate(float,float,float) -> b
    void unproject$649c6b07(com.badlogic.gdx.math.Vector3,float,float) -> a
    void project(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.collision.Ray getPickRay(float,float) -> a
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.b:
    com.badlogic.gdx.graphics.Color CLEAR -> a
    com.badlogic.gdx.graphics.Color WHITE -> b
    com.badlogic.gdx.graphics.Color BLACK -> c
    com.badlogic.gdx.graphics.Color RED -> d
    com.badlogic.gdx.graphics.Color GREEN -> e
    com.badlogic.gdx.graphics.Color BLUE -> f
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> g
    com.badlogic.gdx.graphics.Color GRAY -> h
    com.badlogic.gdx.graphics.Color DARK_GRAY -> i
    com.badlogic.gdx.graphics.Color PINK -> j
    com.badlogic.gdx.graphics.Color ORANGE -> k
    com.badlogic.gdx.graphics.Color YELLOW -> l
    com.badlogic.gdx.graphics.Color MAGENTA -> m
    com.badlogic.gdx.graphics.Color CYAN -> n
    float r -> o
    float g -> p
    float b -> q
    float a -> r
    com.badlogic.gdx.graphics.Color tmp -> s
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color) -> b
    void clamp() -> c
    void set(float,float,float,float) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float toFloatBits() -> a
    float toFloatBits(float,float,float,float) -> b
    int rgba8888$40983718() -> b
com.badlogic.gdx.graphics.GL10 -> com.badlogic.gdx.graphics.c:
    void glClientActiveTexture(int) -> a
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glDisableClientState(int) -> b
    void glEnableClientState(int) -> c
    void glLoadIdentity() -> a
    void glLoadMatrixf$49651d03(float[]) -> a
    void glMatrixMode(int) -> d
    void glNormalPointer$4dfa77fc(int,java.nio.Buffer) -> a
    void glTexCoordPointer$5efd7755(int,int,java.nio.Buffer) -> a
    void glVertexPointer$5efd7755(int,int,java.nio.Buffer) -> b
com.badlogic.gdx.graphics.GL11 -> com.badlogic.gdx.graphics.d:
    void glBindBuffer(int,int) -> a
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData$5efd7755(int,int,java.nio.Buffer) -> c
    void glDeleteBuffers$63f29576(java.nio.IntBuffer) -> a
    void glGenBuffers$63f29576(java.nio.IntBuffer) -> b
    void glVertexPointer$3b4dfe4b(int,int,int) -> b
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer$4868d30e(int,int) -> b
    void glTexCoordPointer$3b4dfe4b(int,int,int) -> a
    void glDrawElements$3b4dfe4b$4868d30e(int) -> e
com.badlogic.gdx.graphics.GL20 -> com.badlogic.gdx.graphics.e:
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.graphics.GLCommon -> com.badlogic.gdx.graphics.f:
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    java.lang.String glGetString(int) -> glGetString
    void glPixelStorei(int,int) -> glPixelStorei
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glScissor(int,int,int,int) -> glScissor
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
com.badlogic.gdx.graphics.GLU -> com.badlogic.gdx.graphics.g:
com.badlogic.gdx.graphics.Mesh -> com.badlogic.gdx.graphics.h:
    java.util.Map meshes -> a
    boolean forceVBO -> b
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> c
    com.badlogic.gdx.graphics.glutils.IndexData indices -> d
    boolean autoBind -> e
    boolean isVertexArray -> f
    void setVertices$1cc109a0(float[],int) -> a
    void setIndices(short[]) -> a
    int getNumIndices() -> a
    void setAutoBind$1385ff() -> b
    void render$4868d30e(int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> a
    void render$6e88a955(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int) -> a
    void dispose() -> d
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> b
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> c
    java.nio.FloatBuffer getVerticesBuffer() -> e
    java.nio.ShortBuffer getIndicesBuffer() -> f
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.badlogic.gdx.graphics.i:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] ENUM$VALUES -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] values() -> values
    com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.OrthographicCamera -> com.badlogic.gdx.graphics.j:
    float zoom -> o
    com.badlogic.gdx.math.Vector3 tmp -> p
    void update() -> a
com.badlogic.gdx.graphics.PerspectiveCamera -> com.badlogic.gdx.graphics.k:
    float fieldOfView -> o
    com.badlogic.gdx.math.Vector3 tmp -> p
    void update() -> a
com.badlogic.gdx.graphics.Pixmap -> com.badlogic.gdx.graphics.l:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> c
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> b
    boolean disposed -> d
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void drawPixmap$23690701(com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void drawPixmap$12cb159f(com.badlogic.gdx.graphics.Pixmap,int,int,int,int) -> a
    int getWidth() -> a
    int getHeight() -> b
    void dispose() -> d
    int getGLFormat() -> c
    int getGLInternalFormat() -> e
    int getGLType() -> f
    java.nio.ByteBuffer getPixels() -> g
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
    com.badlogic.gdx.graphics.Pixmap$Blending getBlending() -> i
com.badlogic.gdx.graphics.Pixmap$Blending -> com.badlogic.gdx.graphics.m:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
    com.badlogic.gdx.graphics.Pixmap$Blending[] ENUM$VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Blending[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.Pixmap$Format -> com.badlogic.gdx.graphics.n:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] ENUM$VALUES -> h
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
    com.badlogic.gdx.graphics.Pixmap$Format[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.PixmapIO -> com.badlogic.gdx.graphics.o:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.badlogic.gdx.graphics.p:
    byte[] writeBuffer -> a
    byte[] readBuffer -> b
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.Texture -> com.badlogic.gdx.graphics.q:
    boolean enforcePotImages -> h
    boolean useHWMipMap -> i
    com.badlogic.gdx.assets.AssetManager assetManager -> j
    java.util.Map managedTextures -> a
    java.nio.IntBuffer buffer -> k
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> e
    int glHandle -> f
    com.badlogic.gdx.graphics.TextureData data -> g
    void create(com.badlogic.gdx.graphics.TextureData) -> b
    int createGLHandle() -> g
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void reload() -> h
    void bind() -> a
    int getWidth() -> b
    int getHeight() -> c
    int getTextureObjectHandle() -> e
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void dispose() -> d
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
com.badlogic.gdx.graphics.Texture$1 -> com.badlogic.gdx.graphics.r:
    int val$refCount -> a
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.badlogic.gdx.graphics.s:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> g
    int glEnum -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter[] ENUM$VALUES -> i
    boolean isMipMap() -> a
    int getGLEnum() -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.badlogic.gdx.graphics.t:
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> b
    int glEnum -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap[] ENUM$VALUES -> d
    int getGLEnum() -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.TextureData -> com.badlogic.gdx.graphics.u:
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    void consumeCompressedData() -> f
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
com.badlogic.gdx.graphics.TextureData$TextureDataType -> com.badlogic.gdx.graphics.v:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Compressed -> b
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] ENUM$VALUES -> c
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] values() -> values
    com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.VertexAttribute -> com.badlogic.gdx.graphics.w:
    int usage -> a
    int numComponents -> b
    int offset -> c
    java.lang.String alias -> d
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.VertexAttributes -> com.badlogic.gdx.graphics.x:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    int vertexSize -> a
    int calculateOffsets() -> b
    void checkValidity() -> c
    int size() -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.a:
    char[] xChars -> a
    char[] capChars -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds textBounds -> e
    float color -> f
    com.badlogic.gdx.graphics.Color tempColor -> g
    boolean flipped -> h
    boolean integer -> i
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> d
    boolean ownsTexture -> j
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds draw$32d708c0(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.CharSequence) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.CharSequence,float,float,int,int) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds drawMultiLine(com.badlogic.gdx.graphics.g2d.SpriteBatch,java.lang.CharSequence,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void dispose() -> d
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.b:
    java.lang.String imagePath -> a
    com.badlogic.gdx.files.FileHandle fontFile -> b
    boolean flipped -> c
    float lineHeight -> d
    float capHeight -> e
    float ascent -> f
    float descent -> g
    float down -> h
    float scaleX -> i
    float scaleY -> j
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> k
    float spaceWidth -> l
    float xHeight -> m
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.c:
    int srcX -> a
    int srcY -> b
    int width -> c
    int height -> d
    float u -> e
    float v -> f
    float u2 -> g
    float v2 -> h
    int xoffset -> i
    int yoffset -> j
    int xadvance -> k
    byte[][] kerning -> l
    int getKerning(char) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment -> com.badlogic.gdx.graphics.g2d.d:
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment LEFT -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment CENTER -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment RIGHT -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment[] ENUM$VALUES -> d
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment[] values() -> values
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds -> com.badlogic.gdx.graphics.g2d.e:
    float width -> a
    float height -> b
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    void dispose() -> d
    void clear(int) -> a
    void drawPixmap$1d45ff80(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int) -> a
    void drawPixmap$1c4a40e0(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int) -> a
    java.nio.ByteBuffer getPixels() -> a
    int getHeight() -> b
    int getWidth() -> c
    int getFormat() -> e
    int getGLInternalFormat() -> f
    int getGLFormat() -> g
    int getGLType() -> h
    java.nio.ByteBuffer load(long[],byte[],int,int,int) -> load
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> newPixmap
    void free(long) -> free
    void clear(long,int) -> clear
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> drawPixmap
    void setBlend(int) -> setBlend
    void setScale(int) -> setScale
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.f:
    com.badlogic.gdx.graphics.Color tempColor -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    int bottomLeft -> c
    int bottomCenter -> d
    int bottomRight -> e
    int middleLeft -> f
    int middleCenter -> g
    int middleRight -> h
    int topLeft -> i
    int topCenter -> j
    int topRight -> k
    float leftWidth -> l
    float rightWidth -> m
    float middleWidth -> n
    float middleHeight -> o
    float topHeight -> p
    float bottomHeight -> q
    float[] vertices -> r
    int idx -> s
    com.badlogic.gdx.graphics.Color color -> t
    void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> a
    int add(com.badlogic.gdx.graphics.g2d.TextureRegion,float) -> a
    void set(int,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getTotalWidth() -> e
    float getTotalHeight() -> f
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.g:
    float[] vertices -> a
    com.badlogic.gdx.graphics.Color color -> d
    float x -> e
    float y -> f
    float width -> b
    float height -> c
    float originX -> g
    float originY -> h
    float rotation -> i
    float scaleX -> j
    float scaleY -> r
    boolean dirty -> s
    void set(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void setPosition(float,float) -> b
    void translate(float,float) -> c
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor$4098370b() -> a
    void setOrigin(float,float) -> d
    void setRotation(float) -> a
    void rotate90(boolean) -> a
    void setScale(float,float) -> e
    float[] getVertices() -> b
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    float getX() -> c
    float getY() -> d
    float getWidth() -> e
    float getHeight() -> f
    float getOriginX() -> g
    float getOriginY() -> h
    float getRotation() -> i
    float getScaleX() -> j
    float getScaleY() -> k
    com.badlogic.gdx.graphics.Color getColor() -> l
    void setRegion(float,float,float,float) -> b
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.h:
    com.badlogic.gdx.graphics.Mesh mesh -> e
    com.badlogic.gdx.graphics.Mesh[] buffers -> f
    com.badlogic.gdx.graphics.Texture lastTexture -> g
    float invTexWidth -> h
    float invTexHeight -> i
    int idx -> j
    int currBufferIdx -> k
    float[] vertices -> l
    com.badlogic.gdx.math.Matrix4 transformMatrix -> m
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> n
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> o
    boolean drawing -> p
    boolean blendingDisabled -> q
    int blendSrcFunc -> r
    int blendDstFunc -> s
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> t
    boolean ownsShader -> u
    float color -> a
    com.badlogic.gdx.graphics.Color tempColor -> v
    int renderCalls -> b
    int totalRenderCalls -> c
    int maxSpritesInBatch -> d
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> w
    void begin() -> a
    void end() -> b
    void setColor(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> c
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw$1647d9c(com.badlogic.gdx.graphics.Texture,float[],int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void flush() -> e
    void renderMesh() -> g
    void dispose() -> d
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> f
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void setupMatrices() -> h
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
com.badlogic.gdx.graphics.g2d.SpriteCache -> com.badlogic.gdx.graphics.g2d.i:
    float[] tempVertices -> a
    com.badlogic.gdx.graphics.Mesh mesh -> b
    com.badlogic.gdx.math.Matrix4 transformMatrix -> c
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> d
    java.util.ArrayList caches -> e
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> f
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> g
    com.badlogic.gdx.graphics.g2d.SpriteCache$Cache currentCache -> h
    java.util.ArrayList textures -> i
    java.util.ArrayList counts -> j
    float color -> k
    com.badlogic.gdx.graphics.Color tempColor -> l
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> m
    void beginCache() -> a
    int endCache() -> b
    void add$1647d9c(com.badlogic.gdx.graphics.Texture,float[],int) -> a
    void add$15780067(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int) -> a
    void dispose() -> d
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache -> com.badlogic.gdx.graphics.g2d.j:
    int id -> a
    int offset -> b
    int maxCount -> c
    int textureCount -> d
    com.badlogic.gdx.graphics.Texture[] textures -> e
    int[] counts -> f
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.k:
    java.lang.String[] tuple -> a
    java.util.HashSet textures -> c
    com.badlogic.gdx.utils.Array regions -> d
    java.util.Comparator indexComparator -> b
    void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> a
    com.badlogic.gdx.utils.Array getRegions() -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String) -> a
    com.badlogic.gdx.utils.Array findRegions(java.lang.String) -> b
    com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String) -> c
    void dispose() -> d
    java.lang.String readValue(java.io.BufferedReader) -> a
    int readTuple(java.io.BufferedReader) -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.badlogic.gdx.graphics.g2d.l:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.m:
    int index -> a
    java.lang.String name -> b
    float offsetX -> c
    float offsetY -> d
    int packedWidth -> e
    int packedHeight -> f
    int originalWidth -> g
    int originalHeight -> h
    boolean rotate -> i
    int[] splits -> j
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.badlogic.gdx.graphics.g2d.n:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> d
    float originalOffsetX -> e
    float originalOffsetY -> f
    void setPosition(float,float) -> b
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void setOrigin(float,float) -> d
    void flip(boolean,boolean) -> a
    void rotate90(boolean) -> a
    float getX() -> c
    float getY() -> d
    float getOriginX() -> g
    float getOriginY() -> h
    float getWidth() -> e
    float getHeight() -> f
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.o:
    com.badlogic.gdx.utils.Array pages -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.utils.Array getPages() -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.badlogic.gdx.graphics.g2d.p:
    com.badlogic.gdx.files.FileHandle textureFile -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    boolean useMipMaps -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> h
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.q:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> a
    int index -> b
    java.lang.String name -> c
    float offsetX -> d
    float offsetY -> e
    int originalWidth -> f
    int originalHeight -> g
    boolean rotate -> h
    int left -> i
    int top -> j
    int width -> k
    int height -> l
    boolean flip -> m
    int[] splits -> n
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.r:
    com.badlogic.gdx.graphics.Texture texture -> k
    float u -> l
    float v -> m
    float u2 -> n
    float v2 -> o
    int regionWidth -> p
    int regionHeight -> q
    void setRegion(int,int,int,int) -> a
    void setRegion(float,float,float,float) -> b
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    com.badlogic.gdx.graphics.Texture getTexture() -> m
    float getU() -> n
    float getV() -> o
    float getU2() -> p
    float getV2() -> q
    int getRegionX() -> r
    int getRegionY() -> s
    int getRegionWidth() -> t
    int getRegionHeight() -> u
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.tiled.SimpleTileAtlas -> com.badlogic.gdx.graphics.g2d.a.a:
com.badlogic.gdx.graphics.g2d.tiled.TileAtlas -> com.badlogic.gdx.graphics.g2d.a.b:
    com.badlogic.gdx.utils.IntMap regionsMap -> a
    java.util.HashSet textures -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(int) -> a
    void dispose() -> d
    java.lang.String removeExtension(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.tiled.TileMapRenderer -> com.badlogic.gdx.graphics.g2d.a.c:
    com.badlogic.gdx.graphics.g2d.SpriteCache cache -> d
    int[][][] normalCacheId -> e
    int[][][] blendedCacheId -> f
    com.badlogic.gdx.graphics.g2d.tiled.TileAtlas atlas -> g
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap map -> h
    int mapHeightUnits -> i
    int mapWidthUnits -> j
    int tileWidth -> k
    int tileHeight -> l
    float unitsPerTileX -> m
    float unitsPerTileY -> n
    int tilesPerBlockX -> o
    int tilesPerBlockY -> p
    float unitsPerBlockX -> q
    float unitsPerBlockY -> r
    int[] allLayers -> s
    boolean isSimpleTileAtlas -> t
    com.badlogic.gdx.utils.IntArray blendedTiles -> u
    com.badlogic.gdx.math.Vector3 tmp -> a
    float overdrawX -> b
    float overdrawY -> c
    void init$cda5088(int[][][],com.badlogic.gdx.graphics.g2d.tiled.TileAtlas,int,int,float,float,com.badlogic.gdx.utils.IntArray,int,int) -> a
    int addBlock(int[][],int,int,boolean) -> a
    void dispose() -> d
    com.badlogic.gdx.utils.IntArray createFromCSV(java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.tiled.TileSet -> com.badlogic.gdx.graphics.g2d.a.d:
    int firstgid -> a
    int tileWidth -> b
    int tileHeight -> c
    int margin -> d
    int spacing -> e
    java.lang.String imageName -> f
    java.lang.String name -> g
com.badlogic.gdx.graphics.g2d.tiled.TiledLayer -> com.badlogic.gdx.graphics.g2d.a.e:
    java.lang.String name -> a
    java.util.HashMap properties -> b
    int[][] tiles -> c
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader -> com.badlogic.gdx.graphics.g2d.a.f:
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap createMap(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap createMap$481b2e76(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1 -> com.badlogic.gdx.graphics.g2d.a.g:
    java.util.Stack currBranch -> a
    boolean awaitingData -> b
    com.badlogic.gdx.graphics.g2d.tiled.TiledLayer currLayer -> c
    int currLayerWidth -> d
    int currLayerHeight -> e
    com.badlogic.gdx.graphics.g2d.tiled.TileSet currTileSet -> f
    com.badlogic.gdx.graphics.g2d.tiled.TiledObjectGroup currObjectGroup -> g
    com.badlogic.gdx.graphics.g2d.tiled.TiledObject currObject -> h
    int currTile -> i
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline polyline -> j
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline polygon -> k
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Property currProperty -> l
    java.lang.String encoding -> m
    java.lang.String dataString -> n
    java.lang.String compression -> o
    byte[] data -> p
    int dataCounter -> q
    int row -> r
    int col -> s
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap val$map -> t
    void open(java.lang.String) -> a
    void attribute(java.lang.String,java.lang.String) -> a
    void text(java.lang.String) -> b
    void close() -> a
    void putPolyLine(com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline) -> a
    void putProperty(com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Property) -> a
    void fromCSV() -> c
    void arrangeData() -> d
    void unZlib() -> e
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Polyline -> com.badlogic.gdx.graphics.g2d.a.h:
    java.lang.String name -> a
    java.lang.String points -> b
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1 this$1 -> c
com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1$Property -> com.badlogic.gdx.graphics.g2d.a.i:
    java.lang.String parentType -> a
    java.lang.String name -> b
    java.lang.String value -> c
    com.badlogic.gdx.graphics.g2d.tiled.TiledLoader$1 this$1 -> d
com.badlogic.gdx.graphics.g2d.tiled.TiledMap -> com.badlogic.gdx.graphics.g2d.a.j:
    java.util.ArrayList layers -> a
    java.util.ArrayList objectGroups -> b
    java.util.ArrayList tileSets -> c
    java.util.HashMap properties -> d
    java.util.ArrayList tileProperties -> k
    com.badlogic.gdx.files.FileHandle tmxFile -> e
    java.lang.String orientation -> f
    int width -> g
    int height -> h
    int tileWidth -> i
    int tileHeight -> j
    void setTileProperty(int,java.lang.String,java.lang.String) -> a
com.badlogic.gdx.graphics.g2d.tiled.TiledMap$TileProperty -> com.badlogic.gdx.graphics.g2d.a.k:
    int id -> a
    java.util.HashMap propertyMap -> b
    com.badlogic.gdx.graphics.g2d.tiled.TiledMap this$0 -> c
com.badlogic.gdx.graphics.g2d.tiled.TiledObject -> com.badlogic.gdx.graphics.g2d.a.l:
    java.lang.String name -> a
    java.lang.String type -> b
    int x -> c
    int y -> d
    int width -> e
    int height -> f
    int gid -> g
    java.util.HashMap properties -> h
    java.lang.String polyline -> i
    java.lang.String polygon -> j
com.badlogic.gdx.graphics.g2d.tiled.TiledObjectGroup -> com.badlogic.gdx.graphics.g2d.a.m:
    int width -> a
    int height -> b
    java.lang.String name -> c
    java.util.HashMap properties -> d
    java.util.ArrayList objects -> e
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getWidthPKM(java.nio.ByteBuffer,int) -> getWidthPKM
    int getHeightPKM(java.nio.ByteBuffer,int) -> getHeightPKM
    boolean isValidPKM(java.nio.ByteBuffer,int) -> isValidPKM
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> decodeImage
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.a:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    boolean hasPKMHeader() -> a
    void dispose() -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    void consumeCompressedData() -> f
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.c:
    boolean copyToPOT -> a
    com.badlogic.gdx.files.FileHandle file -> b
    int width -> c
    int height -> d
    com.badlogic.gdx.graphics.Pixmap$Format format -> e
    com.badlogic.gdx.graphics.Pixmap pixmap -> f
    boolean useMipMaps -> g
    boolean isPrepared -> h
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap ensurePot(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData() -> f
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.badlogic.gdx.graphics.glutils.d:
    java.util.Map buffers -> a
    com.badlogic.gdx.graphics.Texture colorTexture -> b
    int framebufferHandle -> c
    int depthbufferHandle -> d
    int width -> e
    int height -> f
    boolean hasDepth -> g
    com.badlogic.gdx.graphics.Pixmap$Format format -> h
    void dispose() -> d
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> a
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.e:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void vertex$483d242b(float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10 -> com.badlogic.gdx.graphics.glutils.f:
    int primitiveType -> a
    float[] positions -> b
    java.nio.FloatBuffer positionsBuffer -> c
    float[] colors -> d
    java.nio.FloatBuffer colorsBuffer -> e
    float[] normals -> f
    java.nio.FloatBuffer normalsBuffer -> g
    float[] texCoords -> h
    java.nio.FloatBuffer texCoordsBuffer -> i
    int idxPos -> j
    int idxCols -> k
    int idxNors -> l
    int idxTexCoords -> m
    boolean hasCols -> n
    boolean hasNors -> o
    boolean hasTexCoords -> p
    int maxVertices -> q
    int numVertices -> r
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void vertex$483d242b(float,float) -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void end() -> a
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.g:
    int primitiveType -> a
    int vertexIdx -> b
    int numSetTexCoords -> c
    int maxVertices -> d
    int numVertices -> e
    com.badlogic.gdx.graphics.Mesh mesh -> f
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> g
    boolean ownsShader -> h
    int numTexCoords -> i
    int vertexSize -> j
    int normalOffset -> k
    int colorOffset -> l
    int texCoordOffset -> m
    com.badlogic.gdx.math.Matrix4 projModelView -> n
    float[] vertices -> o
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes$652c10e4() -> e
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void vertex$483d242b(float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.h:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.i:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    int createBufferObject() -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.j:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    int createBufferObject() -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.k:
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices$1c09d813(short[],int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.l:
    boolean useHWMipMap -> a
    void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int,boolean) -> a
    void generateMipMapCPU(com.badlogic.gdx.graphics.Pixmap,int,int,boolean) -> b
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.m:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    boolean disposePixmap() -> e
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData() -> f
    boolean isPrepared() -> b
    void prepare() -> c
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.n:
    boolean pedantic -> a
    com.badlogic.gdx.utils.ObjectMap shaders -> e
    java.lang.String log -> f
    boolean isCompiled -> g
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> h
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> i
    java.lang.String[] uniformNames -> j
    com.badlogic.gdx.utils.ObjectIntMap attributes -> k
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> l
    java.lang.String[] attributeNames -> m
    int program -> n
    int vertexShaderHandle -> o
    int fragmentShaderHandle -> p
    java.nio.FloatBuffer matrix -> q
    java.lang.String vertexShaderSource -> r
    java.lang.String fragmentShaderSource -> s
    boolean invalidated -> t
    java.nio.ByteBuffer buffer -> u
    java.nio.FloatBuffer floatBuffer -> v
    java.nio.IntBuffer intBuffer -> w
    int refCount -> x
    java.nio.IntBuffer intbuf -> b
    java.nio.IntBuffer params -> c
    java.nio.IntBuffer type -> d
    void compileShaders(java.lang.String,java.lang.String) -> a
    int loadShader(int,java.lang.String) -> a
    java.lang.String getLog() -> a
    boolean isCompiled() -> b
    int fetchAttributeLocation(java.lang.String) -> c
    int fetchUniformLocation(java.lang.String) -> d
    void setUniformi(java.lang.String,int) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setVertexAttribute(java.lang.String,int,int,boolean,int,java.nio.Buffer) -> a
    void setVertexAttribute(java.lang.String,int,int,boolean,int,int) -> a
    void begin() -> c
    void end() -> e
    void dispose() -> d
    void disableVertexAttribute(java.lang.String) -> a
    void enableVertexAttribute(java.lang.String) -> b
    void checkManaged() -> g
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
    void fetchUniforms() -> h
    void fetchAttributes() -> i
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.o:
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean matrixDirty -> b
    com.badlogic.gdx.math.Matrix4 projView -> c
    com.badlogic.gdx.math.Matrix4 transform -> d
    com.badlogic.gdx.math.Matrix4 combined -> e
    com.badlogic.gdx.math.Matrix4 tmp -> f
    com.badlogic.gdx.graphics.Color color -> g
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType currType -> h
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor$4098370b() -> a
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void identity() -> b
    void translate$483d242b(float,float) -> a
    void rotate$4098370b(float) -> a
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> a
    void filledRect(float,float,float,float) -> a
    void filledCircle$483d242b(float) -> b
    void filledTriangle$7b59a84b(float,float,float,float) -> b
    void checkDirty() -> e
    void checkFlush(int) -> a
    void end() -> c
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.p:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Rectangle -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType FilledRectangle -> d
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Box -> e
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Circle -> f
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType FilledCircle -> g
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Triangle -> h
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType FilledTriangle -> i
    int glType -> j
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] ENUM$VALUES -> k
    int getGlType() -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values() -> values
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.q:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> d
    void dispose() -> d
    java.nio.FloatBuffer getBuffer() -> a
    int getNumVertices() -> b
    void setVertices$1cc109a0(float[],int) -> a
    void bind() -> c
    void unbind() -> e
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.r:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    int createBufferObject() -> h
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices$1cc109a0(float[],int) -> a
    void bind() -> c
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind() -> e
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void invalidate() -> g
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.s:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isDirect -> f
    boolean isStatic -> g
    int usage -> h
    boolean isDirty -> i
    boolean isBound -> j
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices$1cc109a0(float[],int) -> a
    void bind() -> c
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind() -> e
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.t:
    int getNumVertices() -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> f
    void setVertices$1cc109a0(float[],int) -> a
    java.nio.FloatBuffer getBuffer() -> a
    void bind() -> c
    void unbind() -> e
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void dispose() -> d
com.badlogic.gdx.input.GestureDetector -> com.badlogic.gdx.d.a:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> a
    float tapSquareSize -> d
    long tapCountInterval -> e
    float longPressSeconds -> f
    long maxFlingDelay -> g
    boolean inTapSquare -> h
    int tapCount -> i
    long lastTapTime -> j
    boolean longPressFired -> b
    boolean pinching -> k
    boolean panning -> l
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> m
    float tapSquareCenterX -> n
    float tapSquareCenterY -> o
    long gestureStartTime -> p
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> q
    com.badlogic.gdx.math.Vector2 initialPointer1 -> r
    com.badlogic.gdx.math.Vector2 initialPointer2 -> s
    com.badlogic.gdx.utils.Timer$Task longPressTask -> t
    boolean touchDown(int,int,int,int) -> a
    boolean touchDown$4096cea7(float,float,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchDragged(float,float,int) -> b
    boolean touchUp(int,int,int,int) -> b
    boolean touchUp(float,float,int,int) -> a
    boolean isPanning() -> a
com.badlogic.gdx.input.GestureDetector$1 -> com.badlogic.gdx.d.b:
    com.badlogic.gdx.input.GestureDetector this$0 -> a
    void run() -> run
com.badlogic.gdx.input.GestureDetector$GestureAdapter -> com.badlogic.gdx.d.c:
    boolean tap$4096cea7(float,float) -> a
    boolean longPress(float,float) -> b
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean zoom$2548a39() -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$GestureListener -> com.badlogic.gdx.d.d:
    boolean tap$4096cea7(float,float) -> a
    boolean longPress(float,float) -> b
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean zoom$2548a39() -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> com.badlogic.gdx.d.e:
    int sampleSize -> a
    float lastX -> b
    float lastY -> c
    float deltaX -> d
    float deltaY -> e
    long lastTime -> f
    int numSamples -> g
    float[] meanX -> h
    float[] meanY -> i
    long[] meanTime -> j
    void start(float,float,long) -> a
    void update(float,float,long) -> b
    float getVelocityX() -> a
    float getVelocityY() -> b
    float getAverage(float[],int) -> a
    long getAverage(long[],int) -> a
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.a:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> a
    float[] clipSpacePlanePointsArray -> b
    com.badlogic.gdx.math.Plane[] planes -> c
    com.badlogic.gdx.math.Vector3[] planePoints -> d
    float[] planePointsArray -> e
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.Interpolation -> com.badlogic.gdx.math.b:
    com.badlogic.gdx.math.Interpolation linear -> a
    com.badlogic.gdx.math.Interpolation fade -> b
    com.badlogic.gdx.math.Interpolation$Pow pow2 -> c
    com.badlogic.gdx.math.Interpolation$PowIn pow2In -> d
    com.badlogic.gdx.math.Interpolation$PowOut pow2Out -> e
    com.badlogic.gdx.math.Interpolation$Pow pow3 -> f
    com.badlogic.gdx.math.Interpolation$PowIn pow3In -> g
    com.badlogic.gdx.math.Interpolation$PowOut pow3Out -> h
    com.badlogic.gdx.math.Interpolation$Pow pow4 -> i
    com.badlogic.gdx.math.Interpolation$PowIn pow4In -> j
    com.badlogic.gdx.math.Interpolation$PowOut pow4Out -> k
    com.badlogic.gdx.math.Interpolation$Pow pow5 -> l
    com.badlogic.gdx.math.Interpolation$PowIn pow5In -> m
    com.badlogic.gdx.math.Interpolation$PowOut pow5Out -> n
    com.badlogic.gdx.math.Interpolation sine -> o
    com.badlogic.gdx.math.Interpolation sineIn -> p
    com.badlogic.gdx.math.Interpolation sineOut -> q
    com.badlogic.gdx.math.Interpolation exp10 -> r
    com.badlogic.gdx.math.Interpolation exp10In -> s
    com.badlogic.gdx.math.Interpolation exp10Out -> t
    com.badlogic.gdx.math.Interpolation exp5 -> u
    com.badlogic.gdx.math.Interpolation exp5In -> v
    com.badlogic.gdx.math.Interpolation exp5Out -> w
    com.badlogic.gdx.math.Interpolation circle -> x
    com.badlogic.gdx.math.Interpolation circleIn -> y
    com.badlogic.gdx.math.Interpolation circleOut -> z
    com.badlogic.gdx.math.Interpolation$Elastic elastic -> A
    com.badlogic.gdx.math.Interpolation$Elastic elasticIn -> B
    com.badlogic.gdx.math.Interpolation$Elastic elasticOut -> C
    com.badlogic.gdx.math.Interpolation swing -> D
    com.badlogic.gdx.math.Interpolation swingIn -> E
    com.badlogic.gdx.math.Interpolation swingOut -> F
    com.badlogic.gdx.math.Interpolation bounce -> G
    com.badlogic.gdx.math.Interpolation bounceIn -> H
    com.badlogic.gdx.math.Interpolation bounceOut -> I
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$1 -> com.badlogic.gdx.math.c:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$2 -> com.badlogic.gdx.math.d:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$3 -> com.badlogic.gdx.math.e:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$4 -> com.badlogic.gdx.math.f:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$5 -> com.badlogic.gdx.math.g:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$6 -> com.badlogic.gdx.math.h:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$7 -> com.badlogic.gdx.math.i:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$8 -> com.badlogic.gdx.math.j:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Bounce -> com.badlogic.gdx.math.k:
    float out(float) -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceIn -> com.badlogic.gdx.math.l:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceOut -> com.badlogic.gdx.math.m:
    float[] widths -> J
    float[] heights -> K
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Elastic -> com.badlogic.gdx.math.n:
    float value -> J
    float power -> K
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticIn -> com.badlogic.gdx.math.o:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticOut -> com.badlogic.gdx.math.p:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Exp -> com.badlogic.gdx.math.q:
    float value -> J
    float power -> K
    float min -> L
    float scale -> M
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpIn -> com.badlogic.gdx.math.r:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpOut -> com.badlogic.gdx.math.s:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Pow -> com.badlogic.gdx.math.t:
    int power -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowIn -> com.badlogic.gdx.math.u:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowOut -> com.badlogic.gdx.math.v:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Swing -> com.badlogic.gdx.math.w:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingIn -> com.badlogic.gdx.math.x:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingOut -> com.badlogic.gdx.math.y:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.Intersector -> com.badlogic.gdx.math.z:
    com.badlogic.gdx.math.Vector3 v0 -> g
    com.badlogic.gdx.math.Vector3 v1 -> h
    com.badlogic.gdx.math.Vector3 v2 -> i
    com.badlogic.gdx.math.Plane p -> j
    com.badlogic.gdx.math.Vector3 i -> k
    com.badlogic.gdx.math.Vector3 dir -> l
    com.badlogic.gdx.math.Vector3 start -> m
    com.badlogic.gdx.math.Vector3 tmp -> a
    com.badlogic.gdx.math.Vector3 best -> b
    com.badlogic.gdx.math.Vector3 tmp1 -> c
    com.badlogic.gdx.math.Vector3 tmp2 -> d
    com.badlogic.gdx.math.Vector3 tmp3 -> e
    com.badlogic.gdx.math.Vector3 intersection -> f
    boolean intersectRayPlane(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Vector3) -> a
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.aa:
    int ATAN2_DIM -> a
    float INV_ATAN2_DIM_MINUS_1 -> c
    java.util.Random random -> b
    double BIG_ENOUGH_CEIL -> d
    float sin(float) -> a
    float cos(float) -> b
    float sinDeg(float) -> c
    float cosDeg(float) -> d
    int random$134621() -> a
    int nextPowerOfTwo(int) -> a
    boolean isPowerOfTwo(int) -> b
    float clamp(float,float,float) -> a
    int ceil(float) -> e
com.badlogic.gdx.math.MathUtils$Cos -> com.badlogic.gdx.math.ab:
    float[] table -> a
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.ac:
    float[] table -> a
com.badlogic.gdx.math.Matrix3 -> com.badlogic.gdx.math.ad:
    float[] val -> a
    float[] tmp -> b
    com.badlogic.gdx.math.Matrix3 idt() -> a
    com.badlogic.gdx.math.Matrix3 mul(com.badlogic.gdx.math.Matrix3) -> a
    com.badlogic.gdx.math.Matrix3 setToTranslation(float,float) -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Matrix3) -> b
    com.badlogic.gdx.math.Matrix3 trn(float,float) -> b
    com.badlogic.gdx.math.Matrix3 translate(float,float) -> c
    com.badlogic.gdx.math.Matrix3 rotate(float) -> a
    com.badlogic.gdx.math.Matrix3 scale(float,float) -> d
    void mul(float[],float[]) -> a
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] tmp -> a
    float[] val -> b
    com.badlogic.gdx.math.Quaternion quat -> c
    com.badlogic.gdx.math.Vector3 tmpV -> d
    com.badlogic.gdx.math.Vector3 l_vez -> e
    com.badlogic.gdx.math.Vector3 l_vex -> f
    com.badlogic.gdx.math.Vector3 l_vey -> g
    com.badlogic.gdx.math.Vector3 tmpVec -> h
    com.badlogic.gdx.math.Matrix4 tmpMat -> i
    com.badlogic.gdx.math.Vector3 right -> j
    com.badlogic.gdx.math.Vector3 tmpForward -> k
    com.badlogic.gdx.math.Vector3 tmpUp -> l
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho2D$7167aba2(float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,float) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix3) -> a
    void mul(float[],float[]) -> mul
    void prj(float[],float[],int,int,int) -> prj
    boolean inv(float[]) -> inv
    com.badlogic.gdx.math.Matrix4 translate$230952ec(float,float) -> b
    com.badlogic.gdx.math.Matrix4 rotate$7167aba2(float) -> a
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.ae:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Plane$PlaneSide testPoint(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 getNormal() -> a
    float getD() -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Plane$PlaneSide -> com.badlogic.gdx.math.af:
    com.badlogic.gdx.math.Plane$PlaneSide OnPlane -> a
    com.badlogic.gdx.math.Plane$PlaneSide Back -> b
    com.badlogic.gdx.math.Plane$PlaneSide Front -> c
    com.badlogic.gdx.math.Plane$PlaneSide[] ENUM$VALUES -> d
    com.badlogic.gdx.math.Plane$PlaneSide[] values() -> values
    com.badlogic.gdx.math.Plane$PlaneSide valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.ag:
    com.badlogic.gdx.math.Quaternion tmp1 -> e
    com.badlogic.gdx.math.Quaternion tmp2 -> f
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float) -> a
    java.lang.String toString() -> toString
    void toMatrix(float[]) -> a
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.ah:
    com.badlogic.gdx.math.Rectangle tmp -> a
    com.badlogic.gdx.math.Rectangle tmp2 -> b
    float x -> c
    float y -> d
    float width -> e
    float height -> f
    void set(float,float,float,float) -> a
    boolean contains(float,float) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.ai:
    com.badlogic.gdx.math.Vector2 tmp -> a
    com.badlogic.gdx.math.Vector2 tmp2 -> b
    com.badlogic.gdx.math.Vector2 tmp3 -> c
    com.badlogic.gdx.math.Vector2 X -> d
    com.badlogic.gdx.math.Vector2 Y -> e
    com.badlogic.gdx.math.Vector2 Zero -> f
    float x -> g
    float y -> h
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2) -> b
    com.badlogic.gdx.math.Vector2 mul$38479b68() -> a
    float dst(com.badlogic.gdx.math.Vector2) -> c
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.aj:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 tmp -> d
    com.badlogic.gdx.math.Vector3 tmp2 -> e
    com.badlogic.gdx.math.Vector3 tmp3 -> f
    com.badlogic.gdx.math.Vector3 X -> g
    com.badlogic.gdx.math.Vector3 Y -> h
    com.badlogic.gdx.math.Vector3 Z -> i
    com.badlogic.gdx.math.Vector3 Zero -> j
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 cpy() -> a
    com.badlogic.gdx.math.Vector3 tmp() -> b
    com.badlogic.gdx.math.Vector3 tmp2() -> c
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 mul(float) -> a
    float dst(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 nor() -> d
    float dot(com.badlogic.gdx.math.Vector3) -> e
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> f
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.WindowedMean -> com.badlogic.gdx.math.ak:
    float[] values -> a
    int added_values -> b
    int last_value -> c
    float mean -> d
    boolean dirty -> e
    void clear() -> a
    void addValue(float) -> a
    float getMean() -> b
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.a.a:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 tmp -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.physics.box2d.Body -> com.badlogic.gdx.physics.box2d.Body:
    long addr -> a
    float[] tmp -> c
    java.util.ArrayList fixtures -> d
    java.util.ArrayList joints -> b
    java.lang.Object userData -> e
    com.badlogic.gdx.math.Vector2 position -> f
    void setTransform(com.badlogic.gdx.math.Vector2,float) -> a
    void jniSetTransform(long,float,float,float) -> jniSetTransform
    com.badlogic.gdx.math.Vector2 getPosition() -> a
    void jniGetPosition(long,float[]) -> jniGetPosition
    float getAngle() -> b
    float jniGetAngle(long) -> jniGetAngle
    java.util.ArrayList getFixtureList() -> c
    java.util.ArrayList getJointList() -> d
    void setUserData$5d527811() -> e
com.badlogic.gdx.physics.box2d.Fixture -> com.badlogic.gdx.physics.box2d.a:
    long addr -> a
    java.lang.Object userData -> b
    void setUserData$5d527811() -> a
com.badlogic.gdx.physics.box2d.Joint -> com.badlogic.gdx.physics.box2d.b:
    long addr -> a
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeA -> b
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeB -> c
com.badlogic.gdx.physics.box2d.JointEdge -> com.badlogic.gdx.physics.box2d.c:
    com.badlogic.gdx.physics.box2d.Body other -> a
    com.badlogic.gdx.physics.box2d.Joint joint -> b
com.badlogic.gdx.physics.box2d.World -> com.badlogic.gdx.physics.box2d.World:
    com.badlogic.gdx.utils.Pool freeBodies -> a
    long addr -> e
    com.badlogic.gdx.utils.LongMap bodies -> b
    com.badlogic.gdx.utils.LongMap fixtures -> c
    com.badlogic.gdx.utils.LongMap joints -> d
    void destroyBody(com.badlogic.gdx.physics.box2d.Body) -> a
    void jniDestroyBody(long,long) -> jniDestroyBody
    void destroyJoint(com.badlogic.gdx.physics.box2d.Joint) -> a
    void jniDestroyJoint(long,long) -> jniDestroyJoint
    void step$483e8c8b(float) -> a
    void jniStep(long,float,int,int) -> jniStep
    void dispose() -> d
    void jniDispose(long) -> jniDispose
com.badlogic.gdx.scenes.scene2d.Action -> com.badlogic.gdx.e.a.a:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> a
    com.badlogic.gdx.utils.Pool pool -> b
    boolean act(float) -> a
    void restart() -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void reset() -> b
    void setPool(com.badlogic.gdx.utils.Pool) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Actor -> com.badlogic.gdx.e.a.b:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Group parent -> b
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> c
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> d
    com.badlogic.gdx.utils.Array actions -> e
    java.lang.String name -> f
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> g
    boolean visible -> h
    float x -> i
    float y -> j
    float width -> k
    float height -> l
    float originX -> m
    float originY -> n
    float scaleX -> o
    float scaleY -> p
    float rotation -> q
    com.badlogic.gdx.graphics.Color color -> r
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void act(float) -> a
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean remove() -> a
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> b
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void clearActions() -> b
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> c
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> d
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> e
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> a
    boolean isVisible() -> f
    float getX() -> g
    void setX(float) -> b
    float getY() -> h
    void setY(float) -> c
    void setPosition(float,float) -> a
    void translate(float,float) -> b
    float getWidth() -> i
    void setWidth(float) -> d
    float getHeight() -> j
    void setHeight(float) -> e
    void setSize(float,float) -> c
    float getOriginX() -> k
    float getOriginY() -> l
    void setOrigin(float,float) -> d
    float getScaleX() -> m
    float getScaleY() -> n
    void setScale$133aeb() -> o
    void setScale(float,float) -> e
    float getRotation() -> p
    void setRotation(float) -> f
    com.badlogic.gdx.graphics.Color getColor() -> q
    com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Event -> com.badlogic.gdx.e.a.c:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> c
    boolean capture -> d
    boolean bubbles -> e
    boolean handled -> f
    boolean stopped -> g
    boolean cancelled -> h
    void handle() -> a
    void stop() -> c
    void reset() -> b
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> d
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getListenerActor() -> e
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean getBubbles() -> f
    boolean isHandled() -> g
    boolean isStopped() -> h
    boolean isCancelled() -> i
    void setCapture(boolean) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> j
com.badlogic.gdx.scenes.scene2d.EventListener -> com.badlogic.gdx.e.a.d:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.Group -> com.badlogic.gdx.e.a.e:
    com.badlogic.gdx.utils.SnapshotArray children -> a
    com.badlogic.gdx.math.Matrix3 localTransform -> b
    com.badlogic.gdx.math.Matrix3 worldTransform -> c
    com.badlogic.gdx.math.Matrix4 batchTransform -> d
    com.badlogic.gdx.math.Matrix4 oldBatchTransform -> e
    boolean transform -> f
    com.badlogic.gdx.math.Rectangle cullingArea -> g
    com.badlogic.gdx.math.Vector2 point -> h
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void drawChildren(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> b
    void applyTransform(com.badlogic.gdx.graphics.g2d.SpriteBatch,com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 computeTransform() -> r
    void resetTransform(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void childrenChanged() -> s
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    void clear() -> t
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> u
    void setTransform$1385ff() -> g_
    boolean isTransform() -> w
com.badlogic.gdx.scenes.scene2d.InputEvent -> com.badlogic.gdx.e.a.f:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> a
    float stageX -> b
    float stageY -> c
    int pointer -> d
    int button -> e
    int keyCode -> f
    int scrollAmount -> g
    char character -> h
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> i
    void reset() -> b
    float getStageX() -> k
    void setStageX(float) -> a
    float getStageY() -> l
    void setStageY(float) -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType() -> m
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> a
    int getPointer() -> n
    void setPointer(int) -> a
    int getButton() -> o
    void setButton(int) -> b
    int getKeyCode() -> p
    void setKeyCode(int) -> c
    char getCharacter() -> q
    void setCharacter(char) -> a
    int getScrollAmount() -> r
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> s
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> com.badlogic.gdx.e.a.g:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> c
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> f
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> g
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> h
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> i
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> j
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] ENUM$VALUES -> k
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values() -> values
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.InputListener -> com.badlogic.gdx.e.a.h:
    int[] $SWITCH_TABLE$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385() -> a
    void enter$6049651d(int) -> a
    void exit$6049651d(int) -> b
    boolean scrolled$3bf7ec50(int) -> c
    int[] $SWITCH_TABLE$com$badlogic$gdx$scenes$scene2d$InputEvent$Type() -> b
com.badlogic.gdx.scenes.scene2d.Stage -> com.badlogic.gdx.e.a.i:
    float width -> a
    float height -> b
    float gutterWidth -> c
    float gutterHeight -> d
    float centerX -> e
    float centerY -> f
    com.badlogic.gdx.graphics.Camera camera -> g
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> h
    boolean ownsBatch -> i
    com.badlogic.gdx.scenes.scene2d.Group root -> j
    com.badlogic.gdx.math.Vector2 stageCoords -> k
    com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors -> l
    boolean[] pointerTouched -> m
    int[] pointerScreenX -> n
    int[] pointerScreenY -> o
    int mouseScreenX -> p
    int mouseScreenY -> q
    com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor -> r
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> s
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> t
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> u
    void draw() -> a
    void act(float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> a
    void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.utils.Array getActors() -> b
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    float getWidth() -> c
    float getHeight() -> e
    com.badlogic.gdx.graphics.Camera getCamera() -> f
    void setCamera(com.badlogic.gdx.graphics.Camera) -> a
    com.badlogic.gdx.scenes.scene2d.Group getRoot() -> g
    com.badlogic.gdx.scenes.scene2d.Actor hit$72f4a4b8(float,float) -> a
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    void dispose() -> d
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> com.badlogic.gdx.e.a.j:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> a
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor target -> c
    int pointer -> d
    int button -> e
    void reset() -> b
com.badlogic.gdx.scenes.scene2d.Touchable -> com.badlogic.gdx.e.a.k:
    com.badlogic.gdx.scenes.scene2d.Touchable enabled -> a
    com.badlogic.gdx.scenes.scene2d.Touchable disabled -> b
    com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly -> c
    com.badlogic.gdx.scenes.scene2d.Touchable[] ENUM$VALUES -> d
    com.badlogic.gdx.scenes.scene2d.Touchable[] values() -> values
    com.badlogic.gdx.scenes.scene2d.Touchable valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.actions.Actions -> com.badlogic.gdx.e.a.a.a:
    com.badlogic.gdx.scenes.scene2d.Action action(java.lang.Class) -> a
    com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy$6a46cf85(float,com.badlogic.gdx.math.Interpolation) -> a
    com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float,com.badlogic.gdx.math.Interpolation) -> a
    com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo$2cbb63ab(float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.ColorAction color$298cd176(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha$33a9621f(float,float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.RepeatAction forever(com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.RunnableAction run(java.lang.Runnable) -> a
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction -> com.badlogic.gdx.e.a.a.b:
    float start -> b
    float end -> c
    com.badlogic.gdx.graphics.Color color -> d
    void begin() -> c
    void update(float) -> b
    void reset() -> b
    void setAlpha(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.ColorAction -> com.badlogic.gdx.e.a.a.c:
    float startR -> b
    float startG -> c
    float startB -> d
    float startA -> e
    com.badlogic.gdx.graphics.Color color -> f
    com.badlogic.gdx.graphics.Color end -> g
    void begin() -> c
    void update(float) -> b
    void reset() -> b
    void setEndColor(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction -> com.badlogic.gdx.e.a.a.d:
    com.badlogic.gdx.scenes.scene2d.Action action -> b
    void setAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void restart() -> a
    void reset() -> b
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction -> com.badlogic.gdx.e.a.a.e:
    float amountX -> b
    float amountY -> c
    void updateRelative(float) -> c
    void setAmount$2548a35(float) -> d
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction -> com.badlogic.gdx.e.a.a.f:
    float startX -> b
    float startY -> c
    float endX -> d
    float endY -> e
    void begin() -> c
    void update(float) -> b
    void setPosition$2548a35(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction -> com.badlogic.gdx.e.a.a.g:
    com.badlogic.gdx.utils.Array actions -> b
    boolean complete -> c
    boolean act(float) -> a
    void restart() -> a
    void reset() -> b
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction -> com.badlogic.gdx.e.a.a.h:
    float lastPercent -> b
    void begin() -> c
    void update(float) -> b
    void updateRelative(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction -> com.badlogic.gdx.e.a.a.i:
    int repeatCount -> c
    int executedCount -> d
    boolean finished -> e
    boolean act(float) -> a
    void restart() -> a
    void setCount$13462e() -> c
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction -> com.badlogic.gdx.e.a.a.j:
    float start -> b
    float end -> c
    void begin() -> c
    void update(float) -> b
    void setRotation(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction -> com.badlogic.gdx.e.a.a.k:
    java.lang.Runnable runnable -> b
    boolean ran -> c
    boolean act(float) -> a
    void restart() -> a
    void reset() -> b
    void setRunnable(java.lang.Runnable) -> a
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction -> com.badlogic.gdx.e.a.a.l:
    float startX -> b
    float startY -> c
    float endX -> d
    float endY -> e
    void begin() -> c
    void update(float) -> b
    void setScale(float,float) -> a
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction -> com.badlogic.gdx.e.a.a.m:
    int index -> c
    boolean act(float) -> a
    void restart() -> a
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction -> com.badlogic.gdx.e.a.a.n:
    float duration -> b
    float time -> c
    com.badlogic.gdx.math.Interpolation interpolation -> d
    boolean reverse -> e
    boolean complete -> f
    boolean act(float) -> a
    void begin() -> c
    void update(float) -> b
    void restart() -> a
    void reset() -> b
    void setDuration(float) -> e
    void setInterpolation(com.badlogic.gdx.math.Interpolation) -> a
com.badlogic.gdx.scenes.scene2d.ui.Image -> com.badlogic.gdx.e.a.b.a:
    com.badlogic.gdx.utils.Scaling scaling -> a
    int align -> b
    float imageX -> c
    float imageY -> d
    float imageWidth -> e
    float imageHeight -> f
    com.badlogic.gdx.scenes.scene2d.utils.Drawable drawable -> g
    void layout() -> r
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    float getMinWidth() -> c_
    float getMinHeight() -> d_
    float getPrefWidth() -> b_
    float getPrefHeight() -> v
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane -> com.badlogic.gdx.e.a.b.b:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle style -> A
    com.badlogic.gdx.scenes.scene2d.Actor widget -> B
    com.badlogic.gdx.math.Rectangle hScrollBounds -> a
    com.badlogic.gdx.math.Rectangle vScrollBounds -> b
    com.badlogic.gdx.math.Rectangle hKnobBounds -> c
    com.badlogic.gdx.math.Rectangle vKnobBounds -> d
    com.badlogic.gdx.math.Rectangle widgetAreaBounds -> C
    com.badlogic.gdx.math.Rectangle widgetCullingArea -> D
    com.badlogic.gdx.math.Rectangle scissorBounds -> E
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener gestureListener -> F
    boolean scrollX -> e
    boolean scrollY -> f
    float amountX -> g
    float amountY -> h
    float visualAmountX -> i
    float visualAmountY -> j
    float maxX -> k
    float maxY -> l
    boolean touchScrollH -> m
    boolean touchScrollV -> n
    com.badlogic.gdx.math.Vector2 lastPoint -> o
    float areaWidth -> p
    float areaHeight -> q
    boolean fadeScrollBars -> G
    boolean smoothScrolling -> H
    float fadeAlpha -> r
    float fadeAlphaSeconds -> s
    float fadeDelay -> t
    float fadeDelaySeconds -> u
    boolean flickScroll -> v
    float velocityX -> w
    float velocityY -> x
    float flingTimer -> y
    boolean overscrollX -> I
    boolean overscrollY -> J
    float flingTime -> z
    float overscrollDistance -> K
    float overscrollSpeedMin -> L
    float overscrollSpeedMax -> M
    boolean forceOverscrollX -> N
    boolean forceOverscrollY -> O
    boolean disableX -> P
    boolean disableY -> Q
    boolean clamp -> R
    boolean scrollbarsOnTop -> S
    void resetFade() -> a_
    void cancelTouchFocusedChild$2f9d2637() -> y
    void clamp() -> z
    void act(float) -> a
    void layout() -> A
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    float getPrefWidth() -> b_
    float getPrefHeight() -> v
    float getMinWidth() -> c_
    float getMinHeight() -> d_
    void setWidget(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void setScrollX(float) -> g
    void setScrollY(float) -> h
    float getScrollPercentX() -> D
    void setScrollPercentX(float) -> i
    float getScrollPercentY() -> E
    void setScrollPercentY(float) -> j
    void setScrollingDisabled$25decb5() -> B
    void setClamp$1385ff() -> C
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1 -> com.badlogic.gdx.e.a.b.c:
    float handlePosition -> b
    int draggingPointer -> c
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385() -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2 -> com.badlogic.gdx.e.a.b.d:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    void pan$645d22b7$43069389(float,float) -> a
    void fling$1dcb6a94$43069389(float,float) -> b
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3 -> com.badlogic.gdx.e.a.b.e:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    boolean scrolled$3bf7ec50(int) -> c
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> com.badlogic.gdx.e.a.b.f:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable corner -> b
    com.badlogic.gdx.scenes.scene2d.utils.Drawable hScroll -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable hScrollKnob -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable vScroll -> e
    com.badlogic.gdx.scenes.scene2d.utils.Drawable vScrollKnob -> f
com.badlogic.gdx.scenes.scene2d.ui.Skin -> com.badlogic.gdx.e.a.b.g:
    com.badlogic.gdx.utils.ObjectMap resources -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> b
    void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> a
    void add(java.lang.String,java.lang.Object,java.lang.Class) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    java.lang.Object optional(java.lang.String,java.lang.Class) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String) -> b
    com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String) -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String) -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color) -> a
    void dispose() -> d
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> com.badlogic.gdx.e.a.b.h:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> com.badlogic.gdx.e.a.b.i:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin read$28ddaaad(com.badlogic.gdx.utils.Json,java.lang.Object) -> b
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> com.badlogic.gdx.e.a.b.j:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    com.badlogic.gdx.files.FileHandle val$skinFile -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont read$251bbf52(com.badlogic.gdx.utils.Json,java.lang.Object) -> b
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> com.badlogic.gdx.e.a.b.k:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> com.badlogic.gdx.e.a.b.l:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> com.badlogic.gdx.e.a.b.m:
com.badlogic.gdx.scenes.scene2d.ui.Table -> com.badlogic.gdx.e.a.b.n:
    com.badlogic.gdx.scenes.scene2d.ui.TableLayout layout -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> b
    boolean clip -> c
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> d
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void invalidate() -> x
    float getPrefWidth() -> b_
    float getPrefHeight() -> v
    float getMinWidth() -> c_
    float getMinHeight() -> d_
    void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void clear() -> t
    com.esotericsoftware.tablelayout.Cell add(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    com.esotericsoftware.tablelayout.Cell row() -> y
    void layout() -> A
    com.badlogic.gdx.scenes.scene2d.ui.Table padTop(float) -> g
com.badlogic.gdx.scenes.scene2d.ui.TableLayout -> com.badlogic.gdx.e.a.b.o:
    com.badlogic.gdx.utils.Array debugRects -> a
    boolean round -> b
    void layout() -> a
com.badlogic.gdx.scenes.scene2d.ui.TableToolkit -> com.badlogic.gdx.e.a.b.p:
    boolean drawDebug -> a
    float getMinHeight(java.lang.Object) -> a
    float getPrefHeight(java.lang.Object) -> b
    void addDebugRectangle(com.esotericsoftware.tablelayout.BaseTableLayout,com.esotericsoftware.tablelayout.BaseTableLayout$Debug,float,float,float,float) -> a
    void addChild(java.lang.Object,java.lang.Object) -> a
    void clearDebugRectangles(com.esotericsoftware.tablelayout.BaseTableLayout) -> a
    float getPrefWidth(java.lang.Object) -> c
    float getMinWidth(java.lang.Object) -> d
    void removeChild(java.lang.Object,java.lang.Object) -> b
com.badlogic.gdx.scenes.scene2d.ui.TableToolkit$DebugRect -> com.badlogic.gdx.e.a.b.q:
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug type -> g
com.badlogic.gdx.scenes.scene2d.ui.Widget -> com.badlogic.gdx.e.a.b.r:
    boolean needsLayout -> a
    boolean fillParent -> b
    boolean layoutEnabled -> c
    float getMinWidth() -> c_
    float getMinHeight() -> d_
    float getPrefWidth() -> b_
    float getPrefHeight() -> v
    void validate() -> e_
    void invalidate() -> x
    void invalidateHierarchy() -> f_
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void layout() -> r
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> com.badlogic.gdx.e.a.b.s:
    boolean needsLayout -> a
    boolean fillParent -> b
    boolean layoutEnabled -> c
    float getMinWidth() -> c_
    float getMinHeight() -> d_
    float getPrefWidth() -> b_
    float getPrefHeight() -> v
    void validate() -> e_
    void invalidate() -> x
    void invalidateHierarchy() -> f_
    void childrenChanged() -> s
    void layout() -> A
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener -> com.badlogic.gdx.e.a.c.a:
    com.badlogic.gdx.input.GestureDetector detector -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent event -> b
    com.badlogic.gdx.scenes.scene2d.Actor actor -> c
    com.badlogic.gdx.scenes.scene2d.Actor touchDownTarget -> d
    int[] $SWITCH_TABLE$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> e
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void fling$1dcb6a94$43069389(float,float) -> b
    void pan$645d22b7$43069389(float,float) -> a
    com.badlogic.gdx.input.GestureDetector getGestureDetector() -> a
    int[] $SWITCH_TABLE$com$badlogic$gdx$scenes$scene2d$InputEvent$Type() -> b
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1 -> com.badlogic.gdx.e.a.c.b:
    com.badlogic.gdx.math.Vector2 initialPointer1 -> b
    com.badlogic.gdx.math.Vector2 initialPointer2 -> c
    com.badlogic.gdx.math.Vector2 pointer1 -> d
    com.badlogic.gdx.math.Vector2 pointer2 -> e
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener this$0 -> a
    boolean tap$4096cea7(float,float) -> a
    boolean longPress(float,float) -> b
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean zoom$2548a39() -> a
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> com.badlogic.gdx.e.a.c.c:
    float leftWidth -> a
    float rightWidth -> b
    float topHeight -> c
    float bottomHeight -> d
    float minWidth -> e
    float minHeight -> f
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    float getLeftWidth() -> a
    void setLeftWidth(float) -> a
    float getRightWidth() -> b
    void setRightWidth(float) -> b
    float getTopHeight() -> c
    void setTopHeight(float) -> c
    float getBottomHeight() -> d
    void setBottomHeight(float) -> d
    float getMinWidth() -> e
    void setMinWidth(float) -> e
    float getMinHeight() -> f
    void setMinHeight(float) -> f
com.badlogic.gdx.scenes.scene2d.utils.ClickListener -> com.badlogic.gdx.e.a.c.d:
    float tapSquareSize -> a
    float touchDownX -> b
    float touchDownY -> c
    int pressedPointer -> d
    int button -> e
    boolean pressed -> f
    boolean over -> g
    boolean cancelled -> h
    long tapCountInterval -> i
    int tapCount -> j
    long lastTapTime -> k
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void enter$6049651d(int) -> a
    void exit$6049651d(int) -> b
    void clicked$43069389() -> b
    boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> com.badlogic.gdx.e.a.c.e:
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> com.badlogic.gdx.e.a.c.f:
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getMinWidth() -> e
    float getMinHeight() -> f
com.badlogic.gdx.scenes.scene2d.utils.FocusListener -> com.badlogic.gdx.e.a.c.g:
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent -> com.badlogic.gdx.e.a.c.h:
    boolean focused -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type type -> b
    void setFocused(boolean) -> b
    void setType(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type) -> a
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type -> com.badlogic.gdx.e.a.c.i:
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type keyboard -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type scroll -> b
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] ENUM$VALUES -> c
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] values() -> values
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.utils.Layout -> com.badlogic.gdx.e.a.c.j:
    void invalidate() -> x
    void invalidateHierarchy() -> f_
    void validate() -> e_
    float getMinWidth() -> c_
    float getMinHeight() -> d_
    float getPrefWidth() -> b_
    float getPrefHeight() -> v
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> com.badlogic.gdx.e.a.c.k:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch() -> g
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> com.badlogic.gdx.e.a.c.l:
    com.badlogic.gdx.utils.Array scissors -> c
    com.badlogic.gdx.math.Vector3 tmp -> a
    com.badlogic.gdx.math.Rectangle viewport -> b
    boolean pushScissors(com.badlogic.gdx.math.Rectangle) -> a
    void popScissors() -> a
    void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> com.badlogic.gdx.e.a.c.m:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> g
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> com.badlogic.gdx.e.a.c.n:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> g
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> com.badlogic.gdx.e.a.c.o:
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float,float,float,float) -> a
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator -> d
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    java.lang.Object get(int) -> a
    boolean contains(java.lang.Object,boolean) -> a
    boolean removeValue(java.lang.Object,boolean) -> b
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    java.lang.Object peek() -> b
    void clear() -> c
    java.lang.Object[] resize(int) -> c
    void sort(java.util.Comparator) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray(java.lang.Class) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.b:
    com.badlogic.gdx.utils.Array array -> b
    int index -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.Base64Coder -> com.badlogic.gdx.utils.c:
    char[] map1 -> a
    byte[] map2 -> b
    byte[] decode(java.lang.String) -> a
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy$154271e7(float[],java.nio.Buffer,int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer$ba72910() -> a
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> c
    void freeMemory(java.nio.ByteBuffer) -> freeMemory
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> newDisposableByteBuffer
    void copyJni(float[],java.nio.Buffer,int,int) -> copyJni
com.badlogic.gdx.utils.DelayedRemovalArray -> com.badlogic.gdx.utils.d:
    boolean iterating -> d
    com.badlogic.gdx.utils.IntArray remove -> e
    void begin() -> d
    void end() -> e
    void remove(int) -> d
    boolean removeValue(java.lang.Object,boolean) -> b
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    void clear() -> c
    void sort(java.util.Comparator) -> a
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.e:
    void dispose() -> d
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.f:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> h
    boolean isWindows -> b
    boolean isLinux -> c
    boolean isMac -> d
    boolean is64Bit -> e
    java.io.File nativesDir -> f
    java.lang.String path -> g
    java.lang.String crc(java.lang.String) -> a
    boolean loadLibrary(java.lang.String,java.lang.String) -> a
    java.lang.String extractLibrary(java.lang.String,java.lang.String) -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.g:
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.h:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void add(int) -> a
    void insert(int,int) -> a
    int pop() -> a
    void shrink() -> b
    int[] resize(int) -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntMap -> com.badlogic.gdx.utils.i:
    int size -> a
    int[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    java.lang.Object put(int,java.lang.Object) -> a
    void push(int,java.lang.Object,int,int,int,int,int,int) -> a
    java.lang.Object get(int) -> a
    java.lang.Object remove(int) -> b
    void resize(int) -> c
    int hash2(int) -> d
    int hash3(int) -> e
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Json -> com.badlogic.gdx.utils.j:
    java.lang.String typeName -> a
    boolean usePrototypes -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> c
    com.badlogic.gdx.utils.ObjectMap typeToFields -> d
    com.badlogic.gdx.utils.ObjectMap tagToClass -> e
    com.badlogic.gdx.utils.ObjectMap classToTag -> f
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> g
    com.badlogic.gdx.utils.ObjectMap classToDefaultValues -> h
    boolean ignoreUnknownFields -> i
    void setTypeName$552c4e01() -> a
    void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer) -> a
    void setUsePrototypes$1385ff() -> b
    com.badlogic.gdx.utils.ObjectMap cacheFields(java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Object) -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object) -> a
    java.lang.Object newInstance(java.lang.Class) -> b
com.badlogic.gdx.utils.Json$FieldMetadata -> com.badlogic.gdx.utils.k:
    java.lang.reflect.Field field -> a
    java.lang.Class elementType -> b
com.badlogic.gdx.utils.Json$ReadOnlySerializer -> com.badlogic.gdx.utils.l:
com.badlogic.gdx.utils.Json$Serializable -> com.badlogic.gdx.utils.m:
com.badlogic.gdx.utils.Json$Serializer -> com.badlogic.gdx.utils.n:
    java.lang.Object read$185f67a5(com.badlogic.gdx.utils.Json,java.lang.Object) -> a
com.badlogic.gdx.utils.JsonReader -> com.badlogic.gdx.utils.o:
    byte[] _json_actions -> a
    short[] _json_key_offsets -> b
    char[] _json_trans_keys -> c
    byte[] _json_single_lengths -> d
    byte[] _json_range_lengths -> e
    short[] _json_index_offsets -> f
    byte[] _json_trans_targs -> g
    byte[] _json_trans_actions -> h
    byte[] _json_eof_actions -> i
    com.badlogic.gdx.utils.Array elements -> j
    java.lang.Object root -> k
    java.lang.Object current -> l
    java.lang.Object parse(java.io.Reader) -> a
    java.lang.Object parse(java.io.InputStream) -> a
    java.lang.Object parse(com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object parse$1699830b(char[],int) -> a
    byte[] init__json_trans_targs_0() -> a
    byte[] init__json_trans_actions_0() -> b
    void set(java.lang.String,java.lang.Object) -> a
    void pop() -> c
    void number(java.lang.String,float) -> a
    void bool(java.lang.String,boolean) -> a
    java.lang.String unescape(java.lang.String) -> a
com.badlogic.gdx.utils.JsonWriter -> com.badlogic.gdx.utils.p:
    java.io.Writer writer -> a
    com.badlogic.gdx.utils.Array stack -> b
    com.badlogic.gdx.utils.JsonWriter$JsonObject current -> c
    boolean named -> d
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.badlogic.gdx.utils.JsonWriter$JsonObject -> com.badlogic.gdx.utils.q:
    boolean array -> a
    com.badlogic.gdx.utils.JsonWriter this$0 -> b
com.badlogic.gdx.utils.JsonWriter$OutputType -> com.badlogic.gdx.utils.r:
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> a
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> c
    java.util.regex.Pattern javascriptPattern -> d
    java.util.regex.Pattern minimalPattern -> e
    com.badlogic.gdx.utils.JsonWriter$OutputType[] ENUM$VALUES -> f
    com.badlogic.gdx.utils.JsonWriter$OutputType[] values() -> values
    com.badlogic.gdx.utils.JsonWriter$OutputType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.utils.Logger -> com.badlogic.gdx.utils.s:
    java.lang.String tag -> a
    int level -> b
    void debug(java.lang.String) -> a
    void info(java.lang.String) -> b
    void error(java.lang.String,java.lang.Throwable) -> a
    int getLevel() -> a
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.t:
    int size -> a
    long[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    int hashShift -> h
    int mask -> i
    java.lang.Object remove(long) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.u:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    void put(java.lang.Object,int) -> a
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    int get(java.lang.Object,int) -> b
    void clear() -> a
    void resize(int) -> a
    int hash2(int) -> b
    int hash3(int) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.v:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries -> l
    com.badlogic.gdx.utils.ObjectMap$Values values -> m
    com.badlogic.gdx.utils.ObjectMap$Keys keys -> n
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> c
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    com.badlogic.gdx.utils.ObjectMap$Values values() -> c
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.w:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
    void reset() -> b
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.x:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.y:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> a
    void reset() -> b
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.z:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectMap map -> c
    int nextIndex -> d
    int currentIndex -> e
    void reset() -> b
    void advance() -> c
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> com.badlogic.gdx.utils.aa:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void reset() -> b
    void remove() -> remove
com.badlogic.gdx.utils.OrderedMap -> com.badlogic.gdx.utils.ab:
    com.badlogic.gdx.utils.Array keys -> f
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void clear() -> a
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
    com.badlogic.gdx.utils.ObjectMap$Values values() -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.OrderedMap$1 -> com.badlogic.gdx.utils.ac:
    com.badlogic.gdx.utils.OrderedMap this$0 -> f
    void advance() -> c
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.OrderedMap$2 -> com.badlogic.gdx.utils.ad:
    com.badlogic.gdx.utils.OrderedMap this$0 -> a
    void advance() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.OrderedMap$3 -> com.badlogic.gdx.utils.ae:
    com.badlogic.gdx.utils.OrderedMap this$0 -> a
    void advance() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.af:
    int max -> b
    com.badlogic.gdx.utils.Array freeObjects -> a
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void free(java.lang.Object) -> a
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.ag:
    void reset() -> b
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.ah:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    java.lang.Object obtain(java.lang.Class) -> b
    void free(java.lang.Object) -> a
    void free(com.badlogic.gdx.utils.Array) -> a
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.ai:
    java.lang.Class type -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.Scaling -> com.badlogic.gdx.utils.aj:
    com.badlogic.gdx.utils.Scaling fit -> a
    com.badlogic.gdx.utils.Scaling fill -> b
    com.badlogic.gdx.utils.Scaling fillX -> c
    com.badlogic.gdx.utils.Scaling fillY -> d
    com.badlogic.gdx.utils.Scaling stretch -> e
    com.badlogic.gdx.utils.Scaling stretchX -> f
    com.badlogic.gdx.utils.Scaling stretchY -> g
    com.badlogic.gdx.utils.Scaling none -> h
    com.badlogic.gdx.math.Vector2 temp -> i
    int[] $SWITCH_TABLE$com$badlogic$gdx$utils$Scaling -> j
    com.badlogic.gdx.utils.Scaling[] ENUM$VALUES -> k
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
    com.badlogic.gdx.utils.Scaling[] values() -> values
    com.badlogic.gdx.utils.Scaling valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$com$badlogic$gdx$utils$Scaling() -> a
com.badlogic.gdx.utils.ScreenUtils -> com.badlogic.gdx.utils.ak:
    com.badlogic.gdx.graphics.g2d.TextureRegion getFrameBufferTexture() -> a
com.badlogic.gdx.utils.SerializationException -> com.badlogic.gdx.utils.al:
    java.lang.StringBuffer trace -> a
    java.lang.String getMessage() -> getMessage
    void addTrace(java.lang.String) -> a
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.am:
    java.lang.Object[] snapshot -> d
    java.lang.Object[] recycled -> e
    int snapshots -> f
    java.lang.Object[] begin() -> d
    void end() -> e
    void modified() -> f
    boolean removeValue(java.lang.Object,boolean) -> b
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    void clear() -> c
    void sort(java.util.Comparator) -> a
com.badlogic.gdx.utils.Sort -> com.badlogic.gdx.utils.an:
    com.badlogic.gdx.utils.Sort instance -> a
    com.badlogic.gdx.utils.TimSort timSort -> b
    void sort$6fa18035(java.lang.Object[],java.util.Comparator,int) -> a
    com.badlogic.gdx.utils.Sort instance() -> a
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.ao:
    char[] chars -> a
    int length -> b
    void enlargeBuffer(int) -> b
    void appendNull() -> b
    void append0(java.lang.String) -> b
    char charAt(int) -> charAt
    int length() -> length
    void setLength$13462e() -> a
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    com.badlogic.gdx.utils.StringBuilder append(char) -> a
    com.badlogic.gdx.utils.StringBuilder append(int) -> a
    com.badlogic.gdx.utils.StringBuilder append(long) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[]) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[],int,int) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    java.lang.Appendable append(char) -> append
com.badlogic.gdx.utils.TimSort -> com.badlogic.gdx.utils.ap:
    java.lang.Object[] a -> a
    java.util.Comparator c -> b
    int minGallop -> c
    java.lang.Object[] tmp -> d
    int tmpCount -> e
    int stackSize -> f
    int[] runBase -> g
    int[] runLen -> h
    void doSort(java.lang.Object[],java.util.Comparator,int,int) -> a
    void binarySort(java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator) -> a
    int minRunLength(int) -> a
    void mergeCollapse() -> a
    void mergeForceCollapse() -> b
    void mergeAt(int) -> b
    int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> b
    void mergeHi(int,int,int,int) -> a
    java.lang.Object[] ensureCapacity(int) -> c
com.badlogic.gdx.utils.Timer -> com.badlogic.gdx.utils.aq:
    com.badlogic.gdx.utils.Timer instance -> a
    com.badlogic.gdx.utils.Array tasks -> b
    boolean stopped -> c
    boolean posted -> d
    java.lang.Runnable timerRunnable -> e
    void update() -> a
    void schedule(com.badlogic.gdx.utils.Timer$Task,float) -> a
com.badlogic.gdx.utils.Timer$1 -> com.badlogic.gdx.utils.ar:
    com.badlogic.gdx.utils.Timer this$0 -> a
    void run() -> run
com.badlogic.gdx.utils.Timer$Task -> com.badlogic.gdx.utils.as:
    float delaySeconds -> b
    float intervalSeconds -> c
    int repeatCount -> d
    void run() -> run
    void cancel() -> a
    boolean isScheduled() -> b
com.badlogic.gdx.utils.XmlReader -> com.badlogic.gdx.utils.at:
    com.badlogic.gdx.utils.Array elements -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    com.badlogic.gdx.utils.XmlReader$Element current -> c
    com.badlogic.gdx.utils.StringBuilder textBuffer -> d
    byte[] _xml_actions -> e
    byte[] _xml_key_offsets -> f
    char[] _xml_trans_keys -> g
    byte[] _xml_single_lengths -> h
    byte[] _xml_range_lengths -> i
    short[] _xml_index_offsets -> j
    byte[] _xml_indicies -> k
    byte[] _xml_trans_targs -> l
    byte[] _xml_trans_actions -> m
    com.badlogic.gdx.utils.XmlReader$Element parse$676b1f72() -> b
    com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse$17989470(char[],int) -> a
    void open(java.lang.String) -> a
    void attribute(java.lang.String,java.lang.String) -> a
    void text(java.lang.String) -> b
    void close() -> a
com.badlogic.gdx.utils.XmlReader$Element -> com.badlogic.gdx.utils.au:
    java.lang.String name -> a
    com.badlogic.gdx.utils.ObjectMap attributes -> b
    com.badlogic.gdx.utils.Array children -> c
    java.lang.String text -> d
    com.badlogic.gdx.utils.XmlReader$Element parent -> e
    java.lang.String getName() -> a
    void setAttribute(java.lang.String,java.lang.String) -> a
    void addChild(com.badlogic.gdx.utils.XmlReader$Element) -> a
    java.lang.String getText() -> b
    void setText(java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> b
com.esotericsoftware.tablelayout.BaseTableLayout -> com.a.a.a:
    com.esotericsoftware.tablelayout.Toolkit toolkit -> c
    java.lang.Object table -> d
    int columns -> a
    int rows -> b
    java.util.ArrayList cells -> k
    com.esotericsoftware.tablelayout.Cell cellDefaults -> l
    java.util.ArrayList columnDefaults -> m
    com.esotericsoftware.tablelayout.Cell rowDefaults -> n
    boolean sizeInvalid -> o
    float[] columnMinWidth -> p
    float[] rowMinHeight -> q
    float[] columnPrefWidth -> r
    float[] rowPrefHeight -> s
    float tableMinWidth -> t
    float tableMinHeight -> u
    float tablePrefWidth -> v
    float tablePrefHeight -> w
    float[] columnWidth -> x
    float[] rowHeight -> y
    float[] expandWidth -> z
    float[] expandHeight -> A
    float[] columnWeightedWidth -> B
    float[] rowWeightedHeight -> C
    com.esotericsoftware.tablelayout.Value padTop -> e
    com.esotericsoftware.tablelayout.Value padLeft -> f
    com.esotericsoftware.tablelayout.Value padBottom -> g
    com.esotericsoftware.tablelayout.Value padRight -> h
    int align -> i
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug debug -> j
    void invalidate() -> b
    com.esotericsoftware.tablelayout.Cell add(java.lang.Object) -> a
    com.esotericsoftware.tablelayout.Cell row() -> c
    void endRow() -> a
    void clear() -> d
    java.util.List getCells() -> e
    java.lang.Object getTable() -> f
    void setTable(java.lang.Object) -> b
    float getMinWidth() -> g
    float getMinHeight() -> h
    float getPrefWidth() -> i
    float getPrefHeight() -> j
    com.esotericsoftware.tablelayout.BaseTableLayout pad$7ec84e0b() -> k
    com.esotericsoftware.tablelayout.BaseTableLayout padTop(float) -> a
    com.esotericsoftware.tablelayout.BaseTableLayout padLeft(float) -> b
    com.esotericsoftware.tablelayout.BaseTableLayout padBottom(float) -> c
    com.esotericsoftware.tablelayout.BaseTableLayout padRight(float) -> d
    float getPadTop() -> l
    float getPadLeft() -> m
    float getPadBottom() -> n
    float getPadRight() -> o
    float[] ensureSize(float[],int) -> a
    float w(com.esotericsoftware.tablelayout.Value) -> a
    float h(com.esotericsoftware.tablelayout.Value) -> b
    float w(com.esotericsoftware.tablelayout.Value,com.esotericsoftware.tablelayout.Cell) -> a
    float h(com.esotericsoftware.tablelayout.Value,com.esotericsoftware.tablelayout.Cell) -> b
    void computeSize() -> p
    void layout$4098370b(float,float) -> a
com.esotericsoftware.tablelayout.BaseTableLayout$Debug -> com.a.a.b:
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug none -> a
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug all -> b
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug table -> c
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug cell -> d
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug widget -> e
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug[] ENUM$VALUES -> f
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug[] values() -> values
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug valueOf(java.lang.String) -> valueOf
com.esotericsoftware.tablelayout.Cell -> com.a.a.c:
    com.esotericsoftware.tablelayout.Value minWidth -> a
    com.esotericsoftware.tablelayout.Value minHeight -> b
    com.esotericsoftware.tablelayout.Value prefWidth -> c
    com.esotericsoftware.tablelayout.Value prefHeight -> d
    com.esotericsoftware.tablelayout.Value maxWidth -> e
    com.esotericsoftware.tablelayout.Value maxHeight -> f
    com.esotericsoftware.tablelayout.Value spaceTop -> g
    com.esotericsoftware.tablelayout.Value spaceLeft -> h
    com.esotericsoftware.tablelayout.Value spaceBottom -> i
    com.esotericsoftware.tablelayout.Value spaceRight -> j
    com.esotericsoftware.tablelayout.Value padTop -> k
    com.esotericsoftware.tablelayout.Value padLeft -> l
    com.esotericsoftware.tablelayout.Value padBottom -> m
    com.esotericsoftware.tablelayout.Value padRight -> n
    java.lang.Float fillX -> o
    java.lang.Float fillY -> p
    java.lang.Integer align -> q
    java.lang.Integer expandX -> r
    java.lang.Integer expandY -> s
    java.lang.Boolean ignore -> t
    java.lang.Integer colspan -> u
    java.lang.Boolean uniformX -> v
    java.lang.Boolean uniformY -> w
    java.lang.Object widget -> x
    float widgetX -> y
    float widgetY -> z
    float widgetWidth -> A
    float widgetHeight -> B
    com.esotericsoftware.tablelayout.BaseTableLayout layout -> K
    boolean endRow -> C
    int column -> D
    int row -> E
    int cellAboveIndex -> F
    float computedPadTop -> G
    float computedPadLeft -> H
    float computedPadBottom -> I
    float computedPadRight -> J
    void set(com.esotericsoftware.tablelayout.Cell) -> a
    java.lang.Object getWidget() -> a
    com.esotericsoftware.tablelayout.Cell height$65660d43() -> b
    com.esotericsoftware.tablelayout.Cell spaceTop$65660d43() -> c
    com.esotericsoftware.tablelayout.Cell spaceLeft$65660d43() -> d
    com.esotericsoftware.tablelayout.Cell fillX() -> e
    com.esotericsoftware.tablelayout.Cell expand() -> f
    boolean getIgnore() -> g
    float getWidgetX() -> h
    void setWidgetX(float) -> a
    float getWidgetY() -> i
    void setWidgetY(float) -> b
    float getWidgetWidth() -> j
    void setWidgetWidth(float) -> c
    float getWidgetHeight() -> k
    void setWidgetHeight(float) -> d
com.esotericsoftware.tablelayout.Toolkit -> com.a.a.d:
    com.esotericsoftware.tablelayout.Toolkit instance -> b
    void addChild(java.lang.Object,java.lang.Object) -> a
    void removeChild(java.lang.Object,java.lang.Object) -> b
    float getMinWidth(java.lang.Object) -> d
    float getMinHeight(java.lang.Object) -> a
    float getPrefWidth(java.lang.Object) -> c
    float getPrefHeight(java.lang.Object) -> b
    void clearDebugRectangles(com.esotericsoftware.tablelayout.BaseTableLayout) -> a
    void addDebugRectangle(com.esotericsoftware.tablelayout.BaseTableLayout,com.esotericsoftware.tablelayout.BaseTableLayout$Debug,float,float,float,float) -> a
com.esotericsoftware.tablelayout.Value -> com.a.a.e:
    com.esotericsoftware.tablelayout.Value zero -> a
    com.esotericsoftware.tablelayout.Value minWidth -> b
    com.esotericsoftware.tablelayout.Value minHeight -> c
    com.esotericsoftware.tablelayout.Value prefWidth -> d
    com.esotericsoftware.tablelayout.Value prefHeight -> e
    com.esotericsoftware.tablelayout.Value maxWidth -> f
    com.esotericsoftware.tablelayout.Value maxHeight -> g
    float get$5d527801() -> a
    float get(com.esotericsoftware.tablelayout.Cell) -> a
    float width$5d527801() -> b
    float height$5d527801() -> c
    float width(com.esotericsoftware.tablelayout.Cell) -> b
    float height(com.esotericsoftware.tablelayout.Cell) -> c
com.esotericsoftware.tablelayout.Value$1 -> com.a.a.f:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
    float get$5d527801() -> a
com.esotericsoftware.tablelayout.Value$2 -> com.a.a.g:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$3 -> com.a.a.h:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$4 -> com.a.a.i:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$5 -> com.a.a.j:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$6 -> com.a.a.k:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$7 -> com.a.a.l:
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.esotericsoftware.tablelayout.Value$CellValue -> com.a.a.m:
    float get$5d527801() -> a
com.esotericsoftware.tablelayout.Value$FixedValue -> com.a.a.n:
    float value -> h
    float get$5d527801() -> a
    float get(com.esotericsoftware.tablelayout.Cell) -> a
com.google.ads.Ad -> com.google.ads.Ad:
    boolean isReady() -> isReady
    void loadAd(com.google.ads.AdRequest) -> loadAd
    void setAdListener(com.google.ads.AdListener) -> setAdListener
    void stopLoading() -> stopLoading
com.google.ads.AdActivity -> com.google.ads.AdActivity:
    java.lang.String BASE_URL_PARAM -> BASE_URL_PARAM
    java.lang.String HTML_PARAM -> HTML_PARAM
    java.lang.String URL_PARAM -> URL_PARAM
    java.lang.String INTENT_ACTION_PARAM -> INTENT_ACTION_PARAM
    java.lang.String TYPE_PARAM -> TYPE_PARAM
    java.lang.String ORIENTATION_PARAM -> ORIENTATION_PARAM
    com.google.ads.internal.a a -> a
    java.lang.Object b -> b
    com.google.ads.AdActivity c -> c
    com.google.ads.internal.d d -> d
    com.google.ads.AdActivity e -> e
    com.google.ads.AdActivity f -> f
    com.google.ads.AdActivity$StaticMethodWrapper g -> g
    com.google.ads.internal.AdWebView h -> h
    android.view.ViewGroup i -> i
    boolean j -> j
    long k -> k
    android.widget.RelativeLayout l -> l
    com.google.ads.AdActivity m -> m
    boolean n -> n
    boolean o -> o
    boolean p -> p
    boolean q -> q
    com.google.ads.internal.AdVideoView r -> r
    android.view.View a(int) -> a
    void a(java.lang.String) -> a
    void a(java.lang.String,java.lang.Throwable) -> a
    com.google.ads.internal.AdVideoView getAdVideoView() -> getAdVideoView
    com.google.ads.internal.AdWebView getOpeningAdWebView() -> getOpeningAdWebView
    boolean isShowing() -> isShowing
    void launchAdActivity(com.google.ads.internal.d,com.google.ads.internal.e) -> launchAdActivity
    void a(java.util.HashMap,com.google.ads.internal.d) -> a
    void b(java.util.HashMap,com.google.ads.internal.d) -> b
    void a(com.google.ads.internal.d) -> a
    com.google.ads.internal.AdVideoView a(android.app.Activity) -> a
    void moveAdVideoView(int,int,int,int) -> moveAdVideoView
    void newAdVideoView(int,int,int,int) -> newAdVideoView
    android.widget.RelativeLayout$LayoutParams a(int,int,int,int) -> a
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void a(com.google.ads.internal.AdWebView,boolean,int,boolean) -> a
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void d() -> d
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.lang.Object a() -> a
    com.google.ads.AdActivity b() -> b
    com.google.ads.internal.d c() -> c
    com.google.ads.internal.d b(com.google.ads.internal.d) -> b
com.google.ads.AdActivity$StaticMethodWrapper -> com.google.ads.AdActivity$StaticMethodWrapper:
    boolean isShowing() -> isShowing
    void launchAdActivity(com.google.ads.internal.d,com.google.ads.internal.e) -> launchAdActivity
com.google.ads.AdListener -> com.google.ads.AdListener:
    void onReceiveAd(com.google.ads.Ad) -> onReceiveAd
    void onFailedToReceiveAd(com.google.ads.Ad,com.google.ads.AdRequest$ErrorCode) -> onFailedToReceiveAd
    void onPresentScreen(com.google.ads.Ad) -> onPresentScreen
    void onDismissScreen(com.google.ads.Ad) -> onDismissScreen
    void onLeaveApplication(com.google.ads.Ad) -> onLeaveApplication
com.google.ads.AdRequest -> com.google.ads.AdRequest:
    java.lang.String VERSION -> VERSION
    java.text.SimpleDateFormat a -> a
    java.lang.reflect.Method b -> b
    java.lang.reflect.Method c -> c
    com.google.ads.AdRequest$Gender d -> d
    java.util.Date e -> e
    java.util.Set f -> f
    java.util.Map g -> g
    java.util.Map h -> h
    android.location.Location i -> i
    boolean j -> j
    boolean k -> k
    java.lang.String LOGTAG -> LOGTAG
    java.lang.String TEST_EMULATOR -> TEST_EMULATOR
    java.util.Set l -> l
    com.google.ads.AdRequest setGender(com.google.ads.AdRequest$Gender) -> setGender
    com.google.ads.AdRequest$Gender getGender() -> getGender
    com.google.ads.AdRequest setBirthday(java.lang.String) -> setBirthday
    com.google.ads.AdRequest setBirthday(java.util.Date) -> setBirthday
    com.google.ads.AdRequest setBirthday(java.util.Calendar) -> setBirthday
    java.util.Date getBirthday() -> getBirthday
    com.google.ads.AdRequest clearBirthday() -> clearBirthday
    com.google.ads.AdRequest setPlusOneOptOut(boolean) -> setPlusOneOptOut
    boolean getPlusOneOptOut() -> getPlusOneOptOut
    com.google.ads.AdRequest setKeywords(java.util.Set) -> setKeywords
    com.google.ads.AdRequest addKeyword(java.lang.String) -> addKeyword
    com.google.ads.AdRequest addKeywords(java.util.Set) -> addKeywords
    java.util.Set getKeywords() -> getKeywords
    com.google.ads.mediation.admob.AdMobAdapterExtras a() -> a
    com.google.ads.AdRequest setExtras(java.util.Map) -> setExtras
    com.google.ads.AdRequest addExtra(java.lang.String,java.lang.Object) -> addExtra
    com.google.ads.AdRequest setNetworkExtras(com.google.ads.mediation.NetworkExtras) -> setNetworkExtras
    com.google.ads.AdRequest removeNetworkExtras(java.lang.Class) -> removeNetworkExtras
    java.lang.Object getNetworkExtras(java.lang.Class) -> getNetworkExtras
    com.google.ads.AdRequest setMediationExtras(java.util.Map) -> setMediationExtras
    com.google.ads.AdRequest addMediationExtra(java.lang.String,java.lang.Object) -> addMediationExtra
    com.google.ads.AdRequest setLocation(android.location.Location) -> setLocation
    android.location.Location getLocation() -> getLocation
    com.google.ads.AdRequest setTesting(boolean) -> setTesting
    java.util.Map getRequestMap(android.content.Context) -> getRequestMap
    com.google.ads.AdRequest addTestDevice(java.lang.String) -> addTestDevice
    com.google.ads.AdRequest setTestDevices(java.util.Set) -> setTestDevices
    boolean isTestDevice(android.content.Context) -> isTestDevice
com.google.ads.AdRequest$ErrorCode -> com.google.ads.AdRequest$ErrorCode:
    com.google.ads.AdRequest$ErrorCode INVALID_REQUEST -> INVALID_REQUEST
    com.google.ads.AdRequest$ErrorCode NO_FILL -> NO_FILL
    com.google.ads.AdRequest$ErrorCode NETWORK_ERROR -> NETWORK_ERROR
    com.google.ads.AdRequest$ErrorCode INTERNAL_ERROR -> INTERNAL_ERROR
    java.lang.String a -> a
    com.google.ads.AdRequest$ErrorCode[] b -> b
    com.google.ads.AdRequest$ErrorCode[] values() -> values
    com.google.ads.AdRequest$ErrorCode valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.google.ads.AdRequest$Gender -> com.google.ads.AdRequest$Gender:
    com.google.ads.AdRequest$Gender UNKNOWN -> UNKNOWN
    com.google.ads.AdRequest$Gender MALE -> MALE
    com.google.ads.AdRequest$Gender FEMALE -> FEMALE
    com.google.ads.AdRequest$Gender[] a -> a
    com.google.ads.AdRequest$Gender[] values() -> values
    com.google.ads.AdRequest$Gender valueOf(java.lang.String) -> valueOf
com.google.ads.AdSize -> com.google.ads.AdSize:
    int FULL_WIDTH -> FULL_WIDTH
    int AUTO_HEIGHT -> AUTO_HEIGHT
    int LANDSCAPE_AD_HEIGHT -> LANDSCAPE_AD_HEIGHT
    int PORTRAIT_AD_HEIGHT -> PORTRAIT_AD_HEIGHT
    int LARGE_AD_HEIGHT -> LARGE_AD_HEIGHT
    com.google.ads.AdSize SMART_BANNER -> SMART_BANNER
    com.google.ads.AdSize BANNER -> BANNER
    com.google.ads.AdSize IAB_MRECT -> IAB_MRECT
    com.google.ads.AdSize IAB_BANNER -> IAB_BANNER
    com.google.ads.AdSize IAB_LEADERBOARD -> IAB_LEADERBOARD
    com.google.ads.AdSize IAB_WIDE_SKYSCRAPER -> IAB_WIDE_SKYSCRAPER
    int a -> a
    int b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    java.lang.String f -> f
    com.google.ads.AdSize createAdSize(com.google.ads.AdSize,android.content.Context) -> createAdSize
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean a() -> a
    boolean isFullWidth() -> isFullWidth
    boolean isAutoHeight() -> isAutoHeight
    boolean isCustomAdSize() -> isCustomAdSize
    java.lang.String toString() -> toString
    int getWidthInPixels(android.content.Context) -> getWidthInPixels
    int getHeightInPixels(android.content.Context) -> getHeightInPixels
    boolean isSizeAppropriate(int,int) -> isSizeAppropriate
    com.google.ads.AdSize findBestSize(com.google.ads.AdSize[]) -> findBestSize
    int a(android.content.Context) -> a
    int b(android.content.Context) -> b
com.google.ads.AdView -> com.google.ads.AdView:
    com.google.ads.m a -> a
    com.google.ads.internal.d b -> b
    void a(android.content.Context,java.lang.String,int,com.google.ads.AdSize,android.util.AttributeSet) -> a
    int a(android.content.Context,int) -> a
    boolean a(android.content.Context,com.google.ads.AdSize,android.util.AttributeSet) -> a
    boolean b(android.content.Context,com.google.ads.AdSize,android.util.AttributeSet) -> b
    void destroy() -> destroy
    void a(android.content.Context,java.lang.String,com.google.ads.AdSize,android.util.AttributeSet) -> a
    com.google.ads.AdSize[] a(java.lang.String) -> a
    void a(android.content.Context,android.util.AttributeSet) -> a
    java.lang.String a(java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean) -> a
    java.util.Set b(java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean) -> b
    boolean a(java.lang.String,android.util.AttributeSet) -> a
    void a(android.app.Activity,com.google.ads.AdSize,java.lang.String) -> a
    boolean isReady() -> isReady
    boolean isRefreshing() -> isRefreshing
    void loadAd(com.google.ads.AdRequest) -> loadAd
    void setAdListener(com.google.ads.AdListener) -> setAdListener
    void setAppEventListener(com.google.ads.AppEventListener) -> setAppEventListener
    void setSupportedAdSizes(com.google.ads.AdSize[]) -> setSupportedAdSizes
    void a(com.google.ads.AdSize[]) -> a
    void stopLoading() -> stopLoading
com.google.ads.AppEventListener -> com.google.ads.AppEventListener:
    void onAppEvent(java.lang.String,java.lang.String) -> onAppEvent
com.google.ads.InterstitialAd -> com.google.ads.InterstitialAd:
    com.google.ads.internal.d a -> a
    com.google.ads.m b -> b
    boolean isReady() -> isReady
    void loadAd(com.google.ads.AdRequest) -> loadAd
    void show() -> show
    void setAdListener(com.google.ads.AdListener) -> setAdListener
    void setAppEventListener(com.google.ads.AppEventListener) -> setAppEventListener
    void stopLoading() -> stopLoading
com.google.ads.a -> com.google.ads.a:
    java.lang.String a -> a
    java.lang.String b -> b
    java.util.List c -> c
    java.util.HashMap d -> d
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.util.List c() -> c
    java.util.HashMap d() -> d
com.google.ads.aa -> com.google.ads.aa:
    com.google.ads.internal.a a -> a
    int a(java.util.HashMap,java.lang.String,int,android.util.DisplayMetrics) -> a
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.ab -> com.google.ads.ab:
    android.content.Context a -> a
    java.lang.String b -> b
    java.net.HttpURLConnection a(java.net.URL) -> a
    void run() -> run
com.google.ads.ac -> com.google.ads.ac:
    java.lang.ref.WeakReference a -> a
    void run() -> run
com.google.ads.ae -> com.google.ads.ae:
    android.net.Uri a -> a
    android.net.Uri b -> b
    java.lang.String[] c -> c
    java.lang.String[] d -> d
com.google.ads.af -> com.google.ads.af:
    com.google.ads.internal.a a -> a
    void a(android.webkit.WebView,boolean) -> a
    void a(android.webkit.WebView,java.lang.String) -> a
    void a(android.app.Activity,android.webkit.WebView,java.lang.String) -> a
    boolean a(android.content.Context,long) -> a
    boolean a(android.content.Context,long,android.content.SharedPreferences) -> a
    void a(android.app.Activity) -> a
com.google.ads.af$a -> com.google.ads.i:
    java.lang.ref.WeakReference a -> a
    android.content.SharedPreferences$Editor b -> b
    void run() -> run
com.google.ads.af$b -> com.google.ads.j:
    java.lang.ref.WeakReference a -> a
    android.webkit.WebView b -> b
    java.lang.String c -> c
    void run() -> run
com.google.ads.af$c -> com.google.ads.k:
    boolean a -> a
    android.webkit.WebView b -> b
    void run() -> run
com.google.ads.ag -> com.google.ads.ag:
    boolean a(android.content.Context) -> a
    boolean a(android.content.Intent,android.content.Context) -> a
com.google.ads.ah -> com.google.ads.ah:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.ah$a -> com.google.ads.ai:
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.ah$b -> com.google.ads.ah$b:
    com.google.ads.ah$b a -> a
    com.google.ads.ah$b b -> b
    java.lang.String c -> c
    com.google.ads.ah$b[] d -> d
    com.google.ads.ah$b[] values() -> values
    com.google.ads.ah$b valueOf(java.lang.String) -> valueOf
com.google.ads.ah$c -> com.google.ads.aj:
    com.google.ads.internal.d a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.b -> com.google.ads.b:
    java.math.BigInteger a -> a
    java.math.BigInteger b -> b
    com.google.ads.b c -> c
    com.google.ads.b a() -> a
    java.math.BigInteger b() -> b
    java.math.BigInteger c() -> c
    java.math.BigInteger d() -> d
    byte[] a(long) -> a
com.google.ads.c -> com.google.ads.c:
    java.util.Map a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.util.List d -> d
    java.lang.Integer e -> e
    java.lang.Integer f -> f
    java.util.List g -> g
    java.util.List h -> h
    java.util.List i -> i
    com.google.ads.c a(java.lang.String) -> a
    boolean a() -> a
    int b() -> b
    java.lang.String c() -> c
    boolean d() -> d
    int e() -> e
    java.util.List f() -> f
    java.util.List g() -> g
    java.util.List h() -> h
    java.util.List i() -> i
    com.google.ads.a a(org.json.JSONObject) -> a
    com.google.ads.internal.h j() -> j
    java.util.List a(org.json.JSONObject,java.lang.String) -> a
com.google.ads.c$1 -> com.google.ads.ak:
com.google.ads.d -> com.google.ads.d:
    com.google.ads.c a -> a
    long b -> b
    boolean a() -> a
    void a(com.google.ads.c,int) -> a
    com.google.ads.c b() -> b
com.google.ads.doubleclick.DfpExtras -> com.google.ads.a.a:
com.google.ads.e -> com.google.ads.e:
    com.google.ads.internal.d a -> a
    com.google.ads.h b -> b
    java.lang.Object c -> c
    java.lang.Thread d -> d
    java.lang.Object e -> e
    boolean f -> f
    java.lang.Object g -> g
    boolean a() -> a
    void b() -> b
    void a(com.google.ads.c,com.google.ads.AdRequest) -> a
    boolean a(com.google.ads.c,com.google.ads.internal.d) -> a
    boolean a(com.google.ads.h,java.lang.String) -> a
    void a(com.google.ads.h,boolean) -> a
    void a(com.google.ads.h,android.view.View) -> a
    void a(com.google.ads.h) -> a
    void b(com.google.ads.h) -> b
    void c(com.google.ads.h) -> c
    boolean c() -> c
    boolean d() -> d
    void b(com.google.ads.c,com.google.ads.AdRequest) -> b
    boolean a(java.lang.String,android.app.Activity,com.google.ads.AdRequest,com.google.ads.f,java.util.HashMap,long) -> a
    boolean e(com.google.ads.h) -> e
    com.google.ads.h e() -> e
    void d(com.google.ads.h) -> d
    void a(com.google.ads.e,com.google.ads.c,com.google.ads.AdRequest) -> a
    java.lang.Object a(com.google.ads.e) -> a
    java.lang.Thread a$42ec7dd0(com.google.ads.e) -> b
    com.google.ads.internal.d b(com.google.ads.e) -> c
    com.google.ads.h c(com.google.ads.e) -> d
    boolean a(com.google.ads.e,com.google.ads.h) -> a
com.google.ads.e$1 -> com.google.ads.al:
    com.google.ads.c a -> a
    com.google.ads.AdRequest b -> b
    com.google.ads.e c -> c
    void run() -> run
com.google.ads.e$2 -> com.google.ads.am:
    com.google.ads.f a -> a
    boolean b -> b
    com.google.ads.e c -> c
    void run() -> run
com.google.ads.e$3 -> com.google.ads.an:
    android.view.View a -> a
    com.google.ads.f b -> b
    com.google.ads.e c -> c
    void run() -> run
com.google.ads.e$4 -> com.google.ads.ao:
    com.google.ads.e a -> a
    void run() -> run
com.google.ads.e$5 -> com.google.ads.ap:
    com.google.ads.e a -> a
    void run() -> run
com.google.ads.e$6 -> com.google.ads.aq:
    com.google.ads.e a -> a
    void run() -> run
com.google.ads.e$7 -> com.google.ads.ar:
    com.google.ads.c a -> a
    com.google.ads.e b -> b
    void run() -> run
com.google.ads.e$8 -> com.google.ads.as:
    com.google.ads.h a -> a
    android.view.View b -> b
    com.google.ads.f c -> c
    com.google.ads.e d -> d
    void run() -> run
com.google.ads.f -> com.google.ads.f:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.util.List d -> d
    java.util.List e -> e
    java.util.List f -> f
    java.lang.String a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    java.util.List d() -> d
    java.util.List e() -> e
com.google.ads.g -> com.google.ads.g:
    java.lang.String a(java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.Object a(java.lang.String,java.lang.Class) -> a
com.google.ads.g$a -> com.google.ads.g$a:
    com.google.ads.g$a a -> a
    com.google.ads.g$a b -> b
    com.google.ads.g$a c -> c
    com.google.ads.g$a d -> d
    com.google.ads.g$a e -> e
    com.google.ads.g$a f -> f
    com.google.ads.g$a[] g -> g
    com.google.ads.g$a[] values() -> values
    com.google.ads.g$a valueOf(java.lang.String) -> valueOf
com.google.ads.h -> com.google.ads.h:
    com.google.ads.internal.h a -> a
    com.google.ads.f b -> b
    boolean c -> c
    boolean d -> d
    com.google.ads.g$a e -> e
    com.google.ads.e f -> f
    com.google.ads.mediation.MediationAdapter g -> g
    boolean h -> h
    boolean i -> i
    android.view.View j -> j
    android.os.Handler k -> k
    java.lang.String l -> l
    com.google.ads.AdRequest m -> m
    java.util.HashMap n -> n
    com.google.ads.f a() -> a
    void a(android.app.Activity) -> a
    void b() -> b
    boolean c() -> c
    boolean d() -> d
    com.google.ads.g$a e() -> e
    android.view.View f() -> f
    void g() -> g
    java.lang.String h() -> h
    void a$3fda91(com.google.ads.g$a) -> a
    void a(com.google.ads.mediation.MediationAdapter) -> a
    void k() -> i
    boolean l() -> j
    com.google.ads.mediation.MediationAdapter a(com.google.ads.h) -> a
com.google.ads.h$1 -> com.google.ads.at:
    com.google.ads.h a -> a
    void run() -> run
com.google.ads.h$2 -> com.google.ads.au:
    com.google.ads.mediation.MediationInterstitialAdapter a -> a
    com.google.ads.h b -> b
    void run() -> run
com.google.ads.i -> com.google.ads.av:
    com.google.ads.h a -> a
    java.lang.String b -> b
    com.google.ads.AdRequest c -> c
    java.util.HashMap d -> d
    boolean e -> e
    java.lang.ref.WeakReference f -> f
    void run() -> run
    void a(java.lang.String,java.lang.Throwable,com.google.ads.g$a) -> a
com.google.ads.i$a -> com.google.ads.aw:
com.google.ads.internal.AdVideoView -> com.google.ads.b.a:
    com.google.ads.internal.a b -> b
    java.lang.ref.WeakReference c -> c
    com.google.ads.internal.AdWebView d -> d
    android.widget.MediaController a -> a
    long e -> e
    android.widget.VideoView f -> f
    java.lang.String g -> g
    void b() -> a
    void setMediaControllerEnabled(boolean) -> a
    void setSrc(java.lang.String) -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    boolean onError(android.media.MediaPlayer,int,int) -> onError
    void onPrepared(android.media.MediaPlayer) -> onPrepared
    void c() -> b
    void d() -> c
    void a(int) -> a
    void a(android.view.MotionEvent) -> a
    void e() -> d
    void f() -> e
com.google.ads.internal.AdVideoView$a -> com.google.ads.b.b:
    java.lang.ref.WeakReference a -> a
    android.os.Handler b -> b
    void run() -> run
    void a() -> a
com.google.ads.internal.AdWebView -> com.google.ads.b.c:
    java.lang.ref.WeakReference a -> a
    com.google.ads.AdSize b -> b
    boolean c -> c
    boolean d -> d
    void a() -> a
    void b() -> b
    void c() -> c
    com.google.ads.AdActivity d() -> d
    boolean e() -> e
    void setAdActivity(com.google.ads.AdActivity) -> a
    void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> loadDataWithBaseURL
    void loadUrl(java.lang.String) -> loadUrl
    void stopLoading() -> stopLoading
    void destroy() -> destroy
    void setAdSize(com.google.ads.AdSize) -> a
    void onMeasure(int,int) -> onMeasure
    void setIsExpandedMraid(boolean) -> a
com.google.ads.internal.AdWebView$1 -> com.google.ads.b.d:
    com.google.ads.internal.AdWebView a -> a
    void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long) -> onDownloadStart
com.google.ads.internal.a -> com.google.ads.b.e:
    com.google.ads.internal.a d -> d
    com.google.ads.util.f a -> a
    java.util.Map b -> b
    java.util.Map c -> c
    void a(com.google.ads.internal.d,java.util.Map,android.net.Uri,android.webkit.WebView) -> a
    boolean a(android.net.Uri) -> a
    boolean b(android.net.Uri) -> b
    boolean c(android.net.Uri) -> c
    void a(android.webkit.WebView,java.lang.String,java.lang.String) -> a
    void a(android.webkit.WebView,java.lang.String) -> a
    void a(android.webkit.WebView,java.util.Map) -> a
    void a(android.webkit.WebView) -> a
    void b(android.webkit.WebView) -> b
    com.google.ads.internal.a a() -> a
com.google.ads.internal.a$1 -> com.google.ads.b.f:
com.google.ads.internal.a$2 -> com.google.ads.b.g:
    java.lang.Object b() -> b
com.google.ads.internal.a$3 -> com.google.ads.b.h:
com.google.ads.internal.b -> com.google.ads.b.i:
    boolean a -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    java.lang.String c(java.lang.String) -> c
com.google.ads.internal.c -> com.google.ads.b.j:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    boolean e -> e
    com.google.ads.internal.f f -> f
    com.google.ads.internal.d g -> g
    com.google.ads.AdRequest h -> h
    android.webkit.WebView i -> i
    java.lang.String j -> j
    java.util.LinkedList k -> k
    java.lang.String l -> l
    com.google.ads.AdSize m -> m
    boolean n -> n
    boolean o -> o
    com.google.ads.AdRequest$ErrorCode p -> p
    boolean q -> q
    int r -> r
    java.lang.Thread s -> s
    boolean t -> t
    void a(java.lang.String) -> a
    void a() -> a
    void a(com.google.ads.AdRequest) -> a
    void run() -> run
    java.lang.String d() -> d
    java.lang.String a(java.util.Map,android.app.Activity) -> a
    void a(com.google.ads.AdRequest$ErrorCode,boolean) -> a
    void a(boolean) -> a
    void b(java.lang.String) -> b
    void a(java.lang.String,java.lang.String) -> a
    void c(java.lang.String) -> c
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    void a(com.google.ads.AdSize) -> a
    void a(com.google.ads.AdRequest$ErrorCode) -> a
    void c() -> b
    void b$1385ff() -> c
    void a(int) -> a
    void c(boolean) -> b
    android.webkit.WebView a(com.google.ads.internal.c) -> a
    java.lang.String b(com.google.ads.internal.c) -> b
    com.google.ads.internal.d c(com.google.ads.internal.c) -> c
    com.google.ads.AdSize d(com.google.ads.internal.c) -> d
com.google.ads.internal.c$1 -> com.google.ads.b.k:
    com.google.ads.c a -> a
    com.google.ads.internal.c b -> b
    void run() -> run
com.google.ads.internal.c$a -> com.google.ads.b.l:
    com.google.ads.internal.d a -> a
    android.webkit.WebView b -> b
    com.google.ads.internal.f c -> c
    com.google.ads.AdRequest$ErrorCode d -> d
    boolean e -> e
    void run() -> run
com.google.ads.internal.c$b -> com.google.ads.b.m:
    com.google.ads.internal.c a -> a
com.google.ads.internal.c$c -> com.google.ads.b.n:
    java.lang.String b -> b
    java.lang.String c -> c
    android.webkit.WebView d -> d
    com.google.ads.internal.c a -> a
    void run() -> run
com.google.ads.internal.c$d -> com.google.ads.b.o:
    com.google.ads.internal.c a -> a
com.google.ads.internal.c$e -> com.google.ads.b.p:
    com.google.ads.internal.d a -> a
    android.webkit.WebView b -> b
    java.util.LinkedList c -> c
    int d -> d
    boolean e -> e
    java.lang.String f -> f
    com.google.ads.AdSize g -> g
    void run() -> run
com.google.ads.internal.d -> com.google.ads.b.q:
    java.lang.Object a -> a
    com.google.ads.m b -> b
    com.google.ads.internal.c c -> c
    com.google.ads.AdRequest d -> d
    com.google.ads.internal.g e -> e
    com.google.ads.internal.AdWebView f -> f
    com.google.ads.internal.i g -> g
    android.os.Handler h -> h
    long i -> i
    boolean j -> j
    boolean k -> k
    boolean l -> l
    boolean m -> m
    boolean n -> n
    android.content.SharedPreferences o -> o
    long p -> p
    com.google.ads.ac q -> q
    boolean r -> r
    java.util.LinkedList s -> s
    java.util.LinkedList t -> t
    int u -> u
    java.lang.Boolean v -> v
    com.google.ads.d w -> w
    com.google.ads.e x -> x
    com.google.ads.f y -> y
    java.lang.String z -> z
    void a() -> a
    void b() -> b
    void a(java.lang.String) -> a
    java.lang.String c() -> c
    void d() -> d
    void e() -> e
    void f() -> f
    com.google.ads.m h() -> g
    com.google.ads.d i() -> h
    com.google.ads.internal.c j() -> i
    com.google.ads.internal.AdWebView k() -> j
    com.google.ads.internal.i l() -> k
    com.google.ads.internal.g m() -> l
    void a(int) -> a
    int n() -> m
    long o() -> n
    boolean p() -> z
    boolean q() -> o
    boolean r() -> p
    boolean s() -> q
    void a(com.google.ads.AdRequest) -> a
    void a(com.google.ads.AdRequest$ErrorCode) -> a
    void a(com.google.ads.c) -> a
    void a(android.view.View,com.google.ads.h,com.google.ads.f,boolean) -> a
    void a(com.google.ads.f,boolean) -> a
    void b(com.google.ads.c) -> b
    void t() -> r
    void u() -> s
    void v() -> t
    void a(java.lang.String,java.lang.String) -> a
    void w() -> u
    void a(com.google.ads.f,java.lang.Boolean) -> a
    void a(java.util.List,java.lang.String,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.String) -> a
    void x() -> A
    void a(java.lang.Runnable) -> a
    void y() -> v
    void a(long) -> a
    void a(boolean) -> a
    void a(android.view.View) -> a
    void a(float) -> a
    void b(long) -> b
    void z() -> w
    void A() -> x
    void B() -> B
    void C() -> y
    void b(java.lang.String) -> b
    void a(java.util.LinkedList) -> a
    void b(boolean) -> b
com.google.ads.internal.e -> com.google.ads.b.r:
    java.lang.String a -> a
    java.util.HashMap b -> b
    android.os.Bundle a() -> a
    java.lang.String b() -> b
    java.util.HashMap c() -> c
com.google.ads.internal.f -> com.google.ads.b.s:
    com.google.ads.internal.c a -> a
    com.google.ads.internal.d b -> b
    com.google.ads.internal.f$a c -> c
    boolean d -> d
    boolean e -> e
    java.lang.String f -> f
    java.lang.Thread g -> g
    void a() -> a
    void a(java.net.HttpURLConnection) -> a
    void a(boolean) -> a
    void a(java.lang.String) -> a
    void run() -> run
com.google.ads.internal.f$1 -> com.google.ads.b.t:
    java.net.HttpURLConnection a(java.net.URL) -> a
com.google.ads.internal.f$a -> com.google.ads.b.u:
    java.net.HttpURLConnection a(java.net.URL) -> a
com.google.ads.internal.g -> com.google.ads.b.v:
    java.util.LinkedList a -> a
    long b -> b
    long c -> c
    long d -> d
    java.util.LinkedList e -> e
    long f -> f
    long g -> g
    java.lang.String h -> h
    long i -> i
    boolean j -> j
    boolean k -> k
    java.lang.String l -> l
    long m -> m
    java.util.LinkedList n -> n
    java.util.LinkedList o -> o
    void a() -> a
    void b() -> b
    void c() -> c
    void a(com.google.ads.g$a) -> a
    java.lang.String d() -> d
    java.lang.String e() -> e
    void f() -> f
    void g() -> g
    void h() -> h
    void i() -> i
    long j() -> j
    java.lang.String k() -> k
    java.lang.String l() -> l
    long m() -> m
    long n() -> n
    long o() -> o
    long p() -> p
    void q() -> q
    java.lang.String r() -> r
    void a(java.lang.String) -> a
    boolean s() -> s
    void t() -> t
    boolean u() -> u
    void v() -> v
    void w() -> w
    java.lang.String x() -> x
    void b(java.lang.String) -> b
    long y() -> y
com.google.ads.internal.h -> com.google.ads.b.w:
    com.google.ads.AdSize b -> b
    boolean c -> c
    com.google.ads.internal.h a -> a
    com.google.ads.internal.h a(com.google.ads.AdSize,android.content.Context) -> a
    com.google.ads.internal.h a(com.google.ads.AdSize) -> a
    boolean a() -> a
    com.google.ads.AdSize b() -> b
    void b(com.google.ads.AdSize) -> b
com.google.ads.internal.i -> com.google.ads.b.x:
    com.google.ads.internal.a c -> c
    com.google.ads.internal.d a -> a
    java.util.Map d -> d
    boolean b -> b
    boolean e -> e
    boolean f -> f
    boolean g -> g
    boolean h -> h
    com.google.ads.internal.i a(com.google.ads.internal.d,java.util.Map,boolean,boolean) -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void a(boolean) -> a
    void b(boolean) -> b
    void c(boolean) -> c
    void d(boolean) -> d
com.google.ads.internal.j -> com.google.ads.b.y:
    byte[] a -> a
    android.view.ViewGroup a(android.app.Activity,com.google.ads.internal.d) -> a
com.google.ads.internal.j$a -> com.google.ads.b.z:
    android.gesture.GestureStore a -> a
    android.app.Activity b -> b
    com.google.ads.internal.d c -> c
    void onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture) -> onGesturePerformed
    android.app.Activity a(com.google.ads.internal.j$a) -> a
com.google.ads.internal.j$a$1 -> com.google.ads.b.aa:
    com.google.ads.internal.j$a a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.internal.j$a$2 -> com.google.ads.b.ab:
    java.lang.String a -> a
    com.google.ads.internal.j$a b -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.j -> com.google.ads.ax:
    com.google.ads.h a -> a
com.google.ads.k -> com.google.ads.ay:
    com.google.ads.h a -> a
com.google.ads.l -> com.google.ads.l:
    com.google.ads.l b -> b
    com.google.ads.util.i$b a -> a
    com.google.ads.l a() -> a
com.google.ads.l$a -> com.google.ads.l$a:
    com.google.ads.util.i$c a -> a
    com.google.ads.util.i$c b -> b
    com.google.ads.util.i$c c -> c
    com.google.ads.util.i$c d -> d
    com.google.ads.util.i$c e -> e
    com.google.ads.util.i$c f -> f
    com.google.ads.util.i$c g -> g
    com.google.ads.util.i$c h -> h
    com.google.ads.util.i$c i -> i
    com.google.ads.util.i$c j -> j
    com.google.ads.util.i$c k -> k
    com.google.ads.util.i$c l -> l
com.google.ads.m -> com.google.ads.m:
    com.google.ads.util.i$b a -> a
    com.google.ads.util.i$b b -> b
    com.google.ads.util.i$d c -> c
    com.google.ads.util.i$b d -> d
    com.google.ads.util.i$b e -> e
    com.google.ads.util.i$b f -> f
    com.google.ads.util.i$b g -> g
    com.google.ads.util.i$b h -> h
    com.google.ads.util.i$b i -> i
    com.google.ads.util.i$c j -> j
    com.google.ads.util.i$c k -> k
    com.google.ads.util.i$c l -> l
    boolean a() -> a
    boolean b() -> b
    com.google.ads.m a(com.google.ads.Ad,java.lang.String,android.app.Activity,android.view.ViewGroup,com.google.ads.AdSize) -> a
com.google.ads.mediation.MediationAdRequest -> com.google.ads.c.a:
    com.google.ads.AdRequest a -> a
    boolean b -> b
    boolean c -> c
com.google.ads.mediation.MediationAdapter -> com.google.ads.c.b:
    void destroy() -> a
    java.lang.Class getAdditionalParametersType() -> b
    java.lang.Class getServerParametersType() -> c
com.google.ads.mediation.MediationBannerAdapter -> com.google.ads.c.c:
    void requestBannerAd$3a67d0d9() -> d
com.google.ads.mediation.MediationInterstitialAdapter -> com.google.ads.c.d:
    void requestInterstitialAd$732d5d79() -> d
    void showInterstitial() -> e
com.google.ads.mediation.MediationServerParameters -> com.google.ads.c.e:
    void load(java.util.Map) -> a
com.google.ads.mediation.MediationServerParameters$MappingException -> com.google.ads.c.f:
com.google.ads.mediation.MediationServerParameters$Parameter -> com.google.ads.c.g:
    java.lang.String name() -> a
    boolean required() -> b
com.google.ads.mediation.NetworkExtras -> com.google.ads.c.h:
com.google.ads.mediation.admob.AdMobAdapterExtras -> com.google.ads.c.a.a:
    boolean a -> a
    boolean b -> b
    java.util.Map c -> c
    com.google.ads.mediation.admob.AdMobAdapterExtras setPlusOneOptOut(boolean) -> a
    boolean getPlusOneOptOut() -> a
    java.util.Map getExtras() -> b
    com.google.ads.mediation.admob.AdMobAdapterExtras setExtras(java.util.Map) -> a
com.google.ads.n -> com.google.ads.n:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.o -> com.google.ads.o:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.p -> com.google.ads.p:
    com.google.ads.internal.a a -> a
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.q -> com.google.ads.q:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.r -> com.google.ads.r:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.s -> com.google.ads.s:
    com.google.ads.internal.a a -> a
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.searchads.SearchAdRequest -> com.google.ads.d.a:
    java.lang.String a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    java.lang.String h -> h
    int i -> i
    int j -> j
    com.google.ads.searchads.SearchAdRequest$BorderType k -> k
    int l -> l
    java.lang.String m -> m
    java.util.Map getRequestMap(android.content.Context) -> getRequestMap
    java.lang.String a(int) -> a
com.google.ads.searchads.SearchAdRequest$BorderType -> com.google.ads.d.b:
    com.google.ads.searchads.SearchAdRequest$BorderType NONE -> a
    com.google.ads.searchads.SearchAdRequest$BorderType DASHED -> b
    com.google.ads.searchads.SearchAdRequest$BorderType DOTTED -> c
    com.google.ads.searchads.SearchAdRequest$BorderType SOLID -> d
    java.lang.String a -> e
    com.google.ads.searchads.SearchAdRequest$BorderType[] b -> f
    com.google.ads.searchads.SearchAdRequest$BorderType[] values() -> values
    com.google.ads.searchads.SearchAdRequest$BorderType valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.google.ads.t -> com.google.ads.t:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
    java.lang.Runnable a(java.lang.String,android.webkit.WebView) -> a
com.google.ads.u -> com.google.ads.u:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.util.AdUtil -> com.google.ads.util.AdUtil:
    int a -> a
    java.lang.Boolean b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    android.media.AudioManager f -> f
    boolean g -> g
    boolean h -> h
    java.lang.String i -> i
    boolean a(android.content.Intent,android.content.Context) -> a
    java.lang.String a(java.lang.Readable) -> a
    int a(java.lang.String) -> a
    java.lang.String a(android.content.Context) -> a
    int a() -> a
    int b() -> b
    int a(android.content.Context,android.util.DisplayMetrics) -> a
    int b(android.content.Context,android.util.DisplayMetrics) -> b
    boolean b(android.content.Context) -> b
    boolean a(int,int,java.lang.String) -> a
    boolean c(android.content.Context) -> c
    boolean c() -> c
    boolean a(com.google.ads.util.d) -> a
    boolean a(android.net.Uri) -> a
    java.lang.String b(java.lang.String) -> b
    java.lang.String d(android.content.Context) -> d
    java.lang.String e(android.content.Context) -> e
    java.lang.String f(android.content.Context) -> f
    com.google.ads.util.AdUtil$a g(android.content.Context) -> g
    android.util.DisplayMetrics a(android.app.Activity) -> a
    java.lang.String a(android.location.Location) -> a
    java.lang.String b(android.location.Location) -> b
    java.lang.String c(java.lang.String) -> c
    java.util.HashMap b(android.net.Uri) -> b
    boolean d() -> d
    void a(boolean) -> a
    void h(android.content.Context) -> h
    java.lang.String i(android.content.Context) -> i
    void a(android.webkit.WebView) -> a
    void a(java.net.HttpURLConnection,android.content.Context) -> a
    java.lang.String a(java.util.Map) -> a
    org.json.JSONObject b(java.util.Map) -> b
    org.json.JSONArray a(java.util.Set) -> a
com.google.ads.util.AdUtil$UserActivityReceiver -> com.google.ads.util.AdUtil$UserActivityReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.ads.util.AdUtil$a -> com.google.ads.util.AdUtil$a:
    com.google.ads.util.AdUtil$a a -> a
    com.google.ads.util.AdUtil$a b -> b
    com.google.ads.util.AdUtil$a c -> c
    com.google.ads.util.AdUtil$a d -> d
    com.google.ads.util.AdUtil$a e -> e
    com.google.ads.util.AdUtil$a f -> f
    com.google.ads.util.AdUtil$a[] g -> g
    com.google.ads.util.AdUtil$a[] values() -> values
    com.google.ads.util.AdUtil$a valueOf(java.lang.String) -> valueOf
com.google.ads.util.a -> com.google.ads.util.a:
    boolean a -> a
    void a(boolean) -> a
    void a(boolean,java.lang.String) -> a
    void b(boolean) -> b
    void b(boolean,java.lang.String) -> b
    void a(java.lang.Object) -> a
    void b(java.lang.Object) -> b
    void a(java.lang.Object,java.lang.Object) -> a
    void a(java.lang.String) -> a
    void c(boolean,java.lang.String) -> c
com.google.ads.util.a$a -> com.google.ads.util.a$a:
com.google.ads.util.b -> com.google.ads.util.b:
    com.google.ads.util.b$b a -> a
    int b -> b
    void a(com.google.ads.util.b$a,java.lang.String) -> a
    void a(com.google.ads.util.b$a,java.lang.String,java.lang.Throwable) -> a
    void a(java.lang.String) -> a
    void a(java.lang.String,java.lang.Throwable) -> a
    void b(java.lang.String) -> b
    void b(java.lang.String,java.lang.Throwable) -> b
    void c(java.lang.String) -> c
    void c(java.lang.String,java.lang.Throwable) -> c
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    void d(java.lang.String,java.lang.Throwable) -> d
    boolean a(java.lang.String,int) -> a
    boolean a(int) -> a
com.google.ads.util.b$a -> com.google.ads.util.b$a:
    com.google.ads.util.b$a a -> a
    com.google.ads.util.b$a b -> b
    com.google.ads.util.b$a c -> c
    com.google.ads.util.b$a d -> d
    com.google.ads.util.b$a e -> e
    int f -> f
    com.google.ads.util.b$a[] g -> g
    com.google.ads.util.b$a[] values() -> values
    com.google.ads.util.b$a valueOf(java.lang.String) -> valueOf
com.google.ads.util.b$b -> com.google.ads.util.b$b:
    void a(com.google.ads.util.b$a,java.lang.String,java.lang.Throwable) -> a
com.google.ads.util.c -> com.google.ads.util.c:
    boolean a -> a
    byte[] a(java.lang.String) -> a
    byte[] a(byte[],int) -> a
    byte[] a(byte[],int,int,int) -> a
    java.lang.String b(byte[],int) -> b
    byte[] c(byte[],int) -> c
    byte[] b(byte[],int,int,int) -> b
com.google.ads.util.c$a -> com.google.ads.util.c$a:
    byte[] a -> a
    int b -> b
com.google.ads.util.c$b -> com.google.ads.util.c$b:
    int[] c -> c
    int[] d -> d
    int e -> e
    int f -> f
    int[] g -> g
    boolean a(byte[],int,int,boolean) -> a
com.google.ads.util.c$c -> com.google.ads.util.c$c:
    byte[] h -> h
    byte[] i -> i
    byte[] j -> j
    int c -> c
    int k -> k
    boolean d -> d
    boolean e -> e
    boolean f -> f
    byte[] l -> l
    boolean g -> g
    boolean a(byte[],int,int,boolean) -> a
com.google.ads.util.d -> com.google.ads.util.d:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    com.google.ads.util.d d -> d
    com.google.ads.util.d e -> e
    boolean equals(java.lang.Object) -> equals
    boolean a(java.lang.String,java.lang.String) -> a
    int hashCode() -> hashCode
com.google.ads.util.e -> com.google.ads.util.e:
    int a(android.content.Context,android.util.DisplayMetrics) -> a
    int b(android.content.Context,android.util.DisplayMetrics) -> b
    int a(android.content.Context,float,int) -> a
com.google.ads.util.f -> com.google.ads.util.f:
    java.lang.Object b() -> b
com.google.ads.util.g -> com.google.ads.util.g:
    void a(android.webkit.WebSettings,com.google.ads.m) -> a
    void a(android.view.View) -> a
    void b(android.view.View) -> b
    void a(android.view.Window) -> a
com.google.ads.util.g$1 -> com.google.ads.util.j:
    int[] a -> a
com.google.ads.util.g$a -> com.google.ads.util.g$a:
    com.google.ads.m a -> a
    void onCloseWindow(android.webkit.WebView) -> onCloseWindow
    boolean onConsoleMessage(android.webkit.ConsoleMessage) -> onConsoleMessage
    void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater) -> onExceededDatabaseQuota
    boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsAlert
    boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsBeforeUnload
    boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsConfirm
    boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult) -> onJsPrompt
    void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater) -> onReachedMaxAppCacheSize
    void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback) -> onShowCustomView
    boolean a(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsResult,android.webkit.JsPromptResult,boolean) -> a
    void a(android.app.AlertDialog$Builder,java.lang.String,android.webkit.JsResult) -> a
    void a(android.app.AlertDialog$Builder,android.content.Context,java.lang.String,java.lang.String,android.webkit.JsPromptResult) -> a
com.google.ads.util.g$a$1 -> com.google.ads.util.k:
    android.webkit.JsResult a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.google.ads.util.g$a$2 -> com.google.ads.util.l:
    android.webkit.JsResult a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$a$3 -> com.google.ads.util.m:
    android.webkit.JsResult a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$a$4 -> com.google.ads.util.n:
    android.webkit.JsPromptResult a -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.google.ads.util.g$a$5 -> com.google.ads.util.o:
    android.webkit.JsPromptResult a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$a$6 -> com.google.ads.util.p:
    android.webkit.JsPromptResult a -> a
    android.widget.EditText b -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.ads.util.g$b -> com.google.ads.util.g$b:
    android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String) -> shouldInterceptRequest
    android.webkit.WebResourceResponse a(java.lang.String,android.content.Context) -> a
com.google.ads.util.h -> com.google.ads.util.h:
com.google.ads.util.h$a -> com.google.ads.util.h$a:
    void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback) -> onShowCustomView
com.google.ads.util.i -> com.google.ads.util.i:
    java.lang.Object a -> a
    int b -> b
    java.util.HashMap c -> c
    int m -> m
    java.util.ArrayList d -> d
    void finalize() -> finalize
    java.lang.String toString() -> toString
    void a(com.google.ads.util.i$a) -> a
    void a(com.google.ads.util.i,com.google.ads.util.i$a) -> a
com.google.ads.util.i$a -> com.google.ads.util.i$a:
    java.lang.Object a -> a
    java.lang.String b -> b
    com.google.ads.util.i c -> c
    java.lang.String toString() -> toString
com.google.ads.util.i$b -> com.google.ads.util.i$b:
    com.google.ads.util.i d -> d
    java.lang.Object a() -> a
    java.lang.String toString() -> toString
com.google.ads.util.i$c -> com.google.ads.util.i$c:
    boolean e -> e
    com.google.ads.util.i d -> d
    java.lang.Object a() -> a
    void a(java.lang.Object) -> a
    java.lang.String toString() -> toString
com.google.ads.util.i$d -> com.google.ads.util.i$d:
    com.google.ads.util.i d -> d
    java.lang.Object a() -> a
    java.lang.String toString() -> toString
com.google.ads.v -> com.google.ads.v:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.w -> com.google.ads.w:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
    void a(java.util.HashMap,java.lang.String,com.google.ads.util.i$c) -> a
    void b(java.util.HashMap,java.lang.String,com.google.ads.util.i$c) -> b
    void c(java.util.HashMap,java.lang.String,com.google.ads.util.i$c) -> c
com.google.ads.x -> com.google.ads.x:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.y -> com.google.ads.y:
    com.google.ads.AdActivity$StaticMethodWrapper a -> a
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
com.google.ads.z -> com.google.ads.z:
    void a(com.google.ads.internal.d,java.util.HashMap,android.webkit.WebView) -> a
info.u250.c2d.accessors.C2dCameraAccessor -> info.u250.a.a.a:
    boolean $assertionsDisabled -> a
    int getValues(java.lang.Object,int,float[]) -> a
    void setValues(java.lang.Object,int,float[]) -> b
info.u250.c2d.accessors.Cb2ObjectAccessor -> info.u250.a.a.b:
    boolean $assertionsDisabled -> a
    int getValues(java.lang.Object,int,float[]) -> a
    void setValues(java.lang.Object,int,float[]) -> b
info.u250.c2d.accessors.FloatValueAccessor -> info.u250.a.a.c:
    int VALUE -> a
    int getValues(java.lang.Object,int,float[]) -> a
    void setValues(java.lang.Object,int,float[]) -> b
info.u250.c2d.accessors.FloatValueAccessor$FloatValue -> info.u250.a.a.d:
    float value -> a
    float getValue() -> a
    void setValue(float) -> a
info.u250.c2d.accessors.MeshMaskAccessor -> info.u250.a.a.e:
    boolean $assertionsDisabled -> a
    int getValues(java.lang.Object,int,float[]) -> a
    void setValues(java.lang.Object,int,float[]) -> b
info.u250.c2d.accessors.SpriteAccessor -> info.u250.a.a.f:
    boolean $assertionsDisabled -> a
    int getValues(java.lang.Object,int,float[]) -> a
    void setValues(java.lang.Object,int,float[]) -> b
info.u250.c2d.engine.C2dCamera -> info.u250.a.b.a:
    float angleX -> q
    float angleY -> r
    float angleZ -> s
    com.badlogic.gdx.math.Vector3 orbitReturnVector -> t
    com.badlogic.gdx.math.Vector3 lookAt -> u
    void resize(float,float) -> b
    void setZoom(float) -> a
    float getZoom() -> b
    float getAngleX() -> c
    void setAngleX(float) -> b
    float getAngleY() -> d
    void setAngleY(float) -> c
    float getAngleZ() -> e
    void setAngleZ(float) -> d
    void shake() -> f
info.u250.c2d.engine.CoreProvider -> info.u250.a.b.b:
info.u250.c2d.engine.CoreProvider$InGameLoadingScreens -> info.u250.a.b.c:
    java.lang.String SimpleLoading -> a
info.u250.c2d.engine.CoreProvider$StartupLoadingScreens -> info.u250.a.b.d:
    java.lang.String SimpleLoading -> a
    java.lang.String LineLoading -> b
    java.lang.String LineBlocksLoading -> c
    java.lang.String WindmillLoading -> d
info.u250.c2d.engine.CoreProvider$TransitionType -> info.u250.a.b.e:
    info.u250.c2d.engine.CoreProvider$TransitionType SplitRows -> a
    info.u250.c2d.engine.CoreProvider$TransitionType SplitCols -> b
    info.u250.c2d.engine.CoreProvider$TransitionType ZoomOut -> c
    info.u250.c2d.engine.CoreProvider$TransitionType FlipHorizontal -> d
    info.u250.c2d.engine.CoreProvider$TransitionType FlipVertical -> e
    info.u250.c2d.engine.CoreProvider$TransitionType ZoomIn -> f
    info.u250.c2d.engine.CoreProvider$TransitionType Rotate -> g
    info.u250.c2d.engine.CoreProvider$TransitionType RotateWithZoomIn -> h
    info.u250.c2d.engine.CoreProvider$TransitionType Fade -> i
    info.u250.c2d.engine.CoreProvider$TransitionType FadeWhite -> j
    info.u250.c2d.engine.CoreProvider$TransitionType SlideInLeft -> k
    info.u250.c2d.engine.CoreProvider$TransitionType SlideInRight -> l
    info.u250.c2d.engine.CoreProvider$TransitionType SlideInBottom -> m
    info.u250.c2d.engine.CoreProvider$TransitionType SlideInTop -> n
    info.u250.c2d.engine.CoreProvider$TransitionType MoveInLeft -> o
    info.u250.c2d.engine.CoreProvider$TransitionType MoveInRight -> p
    info.u250.c2d.engine.CoreProvider$TransitionType MoveInTop -> q
    info.u250.c2d.engine.CoreProvider$TransitionType MoveInBottom -> r
    info.u250.c2d.engine.CoreProvider$TransitionType[] ENUM$VALUES -> s
    info.u250.c2d.engine.CoreProvider$TransitionType[] values() -> values
    info.u250.c2d.engine.CoreProvider$TransitionType valueOf(java.lang.String) -> valueOf
info.u250.c2d.engine.Engine -> info.u250.a.b.f:
    info.u250.c2d.engine.Engine instance -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer -> b
    info.u250.c2d.engine.EngineDrive engineDrive -> c
    info.u250.c2d.engine.EngineDrive$EngineOptions engineConfig -> d
    info.u250.c2d.engine.events.EventManager eventManager -> e
    com.badlogic.gdx.assets.AssetManager assetManager -> f
    com.badlogic.gdx.graphics.g2d.BitmapFont defaultFont -> g
    com.badlogic.gdx.graphics.g2d.SpriteBatch spriteBatch -> h
    info.u250.c2d.engine.C2dCamera defaultCamera -> i
    info.u250.c2d.engine.load.startup.StartupLoading startupLoading -> j
    info.u250.c2d.engine.load.in.InGameLoading ingameLoading -> k
    info.u250.c2d.engine.resources.MusicManager musicManager -> l
    info.u250.c2d.engine.resources.SoundManager soundManager -> m
    info.u250.c2d.engine.resources.AliasResourceManager aliasResourceManager -> n
    info.u250.c2d.engine.resources.LanguagesManager languagesManager -> o
    info.u250.c2d.graphic.C2dFps fps -> p
    info.u250.c2d.engine.Scene mainScene -> q
    info.u250.c2d.engine.Transition transitionScene -> r
    aurelienribon.tweenengine.TweenManager tweenManager -> s
    boolean running -> t
    java.util.Map updatables -> u
    com.badlogic.gdx.math.collision.Ray ray -> v
    com.badlogic.gdx.math.Plane xzPlane -> w
    com.badlogic.gdx.math.Vector3 intersection -> x
    info.u250.c2d.engine.Engine get() -> f
    info.u250.c2d.engine.EngineDrive onSetupEngineDrive() -> g
    void _setMainScene(info.u250.c2d.engine.Scene) -> a
    void setMainScene(info.u250.c2d.engine.Scene) -> b
    void setMainScene(info.u250.c2d.engine.Scene,info.u250.c2d.engine.CoreProvider$TransitionType) -> a
    info.u250.c2d.engine.Scene getMainScene() -> h
    void create() -> a
    void pause() -> c
    void resume() -> d
    void doResume() -> u
    boolean isPause() -> i
    void render() -> b
    java.lang.Object resource(java.lang.String) -> a
    java.lang.Object resource$52fc0c2c(java.lang.String) -> b
    com.badlogic.gdx.math.Vector2 screenToWorld(float,float) -> a
    info.u250.c2d.engine.resources.MusicManager getMusicManager() -> j
    void addUpdatable(java.lang.String,info.u250.c2d.engine.service.Updatable) -> a
    info.u250.c2d.engine.resources.AliasResourceManager getAliasResourceManager() -> k
    info.u250.c2d.engine.resources.SoundManager getSoundManager() -> l
    com.badlogic.gdx.assets.AssetManager getAssetManager() -> m
    com.badlogic.gdx.graphics.g2d.SpriteBatch getSpriteBatch() -> n
    info.u250.c2d.engine.C2dCamera getDefaultCamera() -> o
    info.u250.c2d.engine.EngineDrive$EngineOptions getEngineConfig() -> p
    com.badlogic.gdx.graphics.g2d.BitmapFont getDefaultFont() -> q
    info.u250.c2d.engine.events.EventManager getEventManager() -> r
    aurelienribon.tweenengine.TweenManager getTweenManager() -> s
    com.badlogic.gdx.graphics.glutils.ShapeRenderer getShapeRenderer() -> t
    void resize(int,int) -> a
    void dispose() -> e
    void access$0(info.u250.c2d.engine.Engine,info.u250.c2d.engine.Transition) -> a
    info.u250.c2d.engine.EngineDrive access$1(info.u250.c2d.engine.Engine) -> a
    info.u250.c2d.engine.resources.AliasResourceManager access$2(info.u250.c2d.engine.Engine) -> b
info.u250.c2d.engine.Engine$1 -> info.u250.a.b.g:
    info.u250.c2d.engine.Engine this$0 -> a
    void onReady$37d74f36() -> a
info.u250.c2d.engine.EngineDrive -> info.u250.a.b.h:
    info.u250.c2d.engine.EngineDrive$EngineOptions onSetupEngine() -> a
    void onLoadedResourcesCompleted() -> b
    void dispose() -> d
    void onResourcesRegister(info.u250.c2d.engine.resources.AliasResourceManager) -> a
info.u250.c2d.engine.EngineDrive$EngineOptions -> info.u250.a.b.i:
    java.lang.String loading -> a
    boolean catchBackKey -> b
    java.lang.String ingameLoading -> c
    java.lang.String[] assets -> d
    float width -> e
    float height -> f
    boolean debug -> g
    boolean autoResume -> h
    boolean resizeSync -> i
    java.lang.String configFile -> j
    boolean useGL20 -> k
info.u250.c2d.engine.Scene -> info.u250.a.b.j:
    void update(float) -> a_
    void render(float) -> b
    void show() -> h_
    com.badlogic.gdx.InputProcessor getInputProcessor() -> i_
info.u250.c2d.engine.Transition -> info.u250.a.b.k:
    boolean transiting -> c
    info.u250.c2d.engine.Scene incoming -> a
    info.u250.c2d.engine.Scene outgoing -> b
    void doTransition$13462e() -> c
    void doSetMainScene(info.u250.c2d.engine.Scene) -> a
    void reset() -> d
    void transition$15580b6e(info.u250.c2d.engine.Scene,info.u250.c2d.engine.Scene) -> a
    boolean isTransiting() -> e
    void update(float) -> a_
    void show() -> h_
    com.badlogic.gdx.InputProcessor getInputProcessor() -> i_
info.u250.c2d.engine.events.Event -> info.u250.a.b.a.a:
    java.lang.String id -> a
    java.lang.Object source -> b
    void setSource(java.lang.Object) -> a
    void setId(java.lang.String) -> a
    java.lang.String getId() -> a
info.u250.c2d.engine.events.EventListener -> info.u250.a.b.a.b:
    void onEvent$70d3b1d5() -> a
info.u250.c2d.engine.events.EventManager -> info.u250.a.b.a.c:
    void fire(java.lang.String,java.lang.Object) -> a
    void fire(java.lang.String) -> a
    void register(java.lang.String,info.u250.c2d.engine.events.EventListener) -> a
    void update(float) -> a_
info.u250.c2d.engine.events.EventManagerImpl -> info.u250.a.b.a.d:
    java.util.Map eventListeners -> a
    info.u250.c2d.engine.events.InternalEventManager eventManager -> b
    void register(java.lang.String,info.u250.c2d.engine.events.EventListener) -> a
    void update(float) -> a_
    void fire(java.lang.String,java.lang.Object) -> a
    void fire(java.lang.String) -> a
info.u250.c2d.engine.events.InternalEventManager -> info.u250.a.b.a.e:
    com.badlogic.gdx.utils.Pool eventPool -> a
    com.badlogic.gdx.utils.Array eventList -> b
    void registerEvent(java.lang.String,java.lang.Object) -> a
    void clear() -> a
    int getEventCount() -> b
    info.u250.c2d.engine.events.Event getEvent(int) -> a
info.u250.c2d.engine.events.InternalEventManager$1 -> info.u250.a.b.a.f:
    info.u250.c2d.engine.events.InternalEventManager this$0 -> a
    java.lang.Object newObject() -> a
info.u250.c2d.engine.load.Loading -> info.u250.a.b.b.a:
    info.u250.c2d.engine.load.Loading$LoadingComplete loadingComplete -> a
    com.badlogic.gdx.assets.AssetManager manager -> b
    boolean loaded -> c
    void finishLoadingCleanup() -> a
    void inLoadingRender(float) -> a
    boolean isLoaded() -> b
    void setLoaded(boolean) -> a
    void setLoadingComplete(info.u250.c2d.engine.load.Loading$LoadingComplete) -> a
    float percent() -> c
    boolean finished() -> e
    void render(float) -> b
    void dispose() -> d
info.u250.c2d.engine.load.Loading$LoadingComplete -> info.u250.a.b.b.b:
    void onReady$37d74f36() -> a
info.u250.c2d.engine.load.in.InGameLoading -> info.u250.a.b.b.a.a:
info.u250.c2d.engine.load.in.SimpleLoading -> info.u250.a.b.b.a.b:
    info.u250.c2d.graphic.FadeMask mask -> c
    void finishLoadingCleanup() -> a
    void inLoadingRender(float) -> a
info.u250.c2d.engine.load.startup.LineBlocksLoading -> info.u250.a.b.b.b.a:
    void inLoadingRender(float) -> a
    void finishLoadingCleanup() -> a
info.u250.c2d.engine.load.startup.LineLoading -> info.u250.a.b.b.b.b:
    void finishLoadingCleanup() -> a
    void inLoadingRender(float) -> a
info.u250.c2d.engine.load.startup.SimpleLoading -> info.u250.a.b.b.b.c:
    void finishLoadingCleanup() -> a
    void inLoadingRender(float) -> a
info.u250.c2d.engine.load.startup.StartupLoading -> info.u250.a.b.b.b.d:
info.u250.c2d.engine.load.startup.WindmillLoading -> info.u250.a.b.b.b.e:
    float deltaAppend -> c
    void finishLoadingCleanup() -> a
    void inLoadingRender(float) -> a
info.u250.c2d.engine.resources.AliasResourceManager -> info.u250.a.b.c.a:
    java.util.Map resources -> b
    java.util.Map resources_alias -> c
    com.badlogic.gdx.utils.Array rules -> a
    java.lang.Object get(java.lang.Object) -> a
    void sound(java.lang.Object,java.lang.String) -> a
    void music(java.lang.Object,java.lang.String) -> b
    void textureAtlas(java.lang.Object,java.lang.String) -> c
    void font(java.lang.Object,java.lang.String) -> d
    void object(java.lang.Object,java.lang.Object) -> a
    void load(java.lang.String) -> a
    void loadDesktop(java.lang.String) -> b
    void loadDirectory(com.badlogic.gdx.files.FileHandle) -> a
    void loadFile(com.badlogic.gdx.files.FileHandle) -> b
info.u250.c2d.engine.resources.AliasResourceManager$LoadResourceRule -> info.u250.a.b.c.b:
    boolean match(com.badlogic.gdx.files.FileHandle) -> a
info.u250.c2d.engine.resources.LanguagesManager -> info.u250.a.b.c.c:
    com.badlogic.gdx.utils.ObjectMap map -> a
    java.lang.String lang -> b
info.u250.c2d.engine.resources.MusicManager -> info.u250.a.b.c.d:
    com.badlogic.gdx.utils.ObjectMap musics -> a
    float musicVolume -> b
    void playMusic$505cbf4b(java.lang.String) -> a
    void playMusic$13124ae0(com.badlogic.gdx.audio.Music) -> a
    void dispose() -> d
info.u250.c2d.engine.resources.SoundManager -> info.u250.a.b.c.e:
    com.badlogic.gdx.utils.ObjectMap sounds -> a
    float soundVolume -> b
    long playSound(java.lang.String) -> a
    void dispose() -> d
info.u250.c2d.engine.resources.rules.RuleFont -> info.u250.a.b.c.a.a:
    boolean match(com.badlogic.gdx.files.FileHandle) -> a
info.u250.c2d.engine.resources.rules.RuleMusic -> info.u250.a.b.c.a.b:
    boolean match(com.badlogic.gdx.files.FileHandle) -> a
info.u250.c2d.engine.resources.rules.RuleSkin -> info.u250.a.b.c.a.c:
    boolean match(com.badlogic.gdx.files.FileHandle) -> a
info.u250.c2d.engine.resources.rules.RuleSound -> info.u250.a.b.c.a.d:
    boolean match(com.badlogic.gdx.files.FileHandle) -> a
info.u250.c2d.engine.resources.rules.RuleTexture -> info.u250.a.b.c.a.e:
    boolean match(com.badlogic.gdx.files.FileHandle) -> a
info.u250.c2d.engine.resources.rules.RuleTextureAtlas -> info.u250.a.b.c.a.f:
    boolean match(com.badlogic.gdx.files.FileHandle) -> a
info.u250.c2d.engine.service.Disposable -> info.u250.a.b.d.a:
info.u250.c2d.engine.service.Updatable -> info.u250.a.b.d.b:
    void update(float) -> a_
info.u250.c2d.engine.transitions.AbstractTransitionSceneMoveIn -> info.u250.a.b.e.a:
    info.u250.c2d.engine.C2dCamera targetCamera -> c
    com.badlogic.gdx.math.Vector3 iniTargetPositionOffset() -> f
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.AbstractTransitionSceneMoveIn) -> a
    void access$1$70dde7d9(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.AbstractTransitionSceneMoveIn$1 -> info.u250.a.b.e.b:
    info.u250.c2d.engine.transitions.AbstractTransitionSceneMoveIn this$0 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.AbstractTransitionSceneSlideIn -> info.u250.a.b.e.c:
    info.u250.c2d.engine.C2dCamera targetCamera -> c
    com.badlogic.gdx.math.Vector3 targetPositionOffset() -> f
    com.badlogic.gdx.math.Vector3 orgiPosition() -> g
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.AbstractTransitionSceneSlideIn) -> a
    void access$1$4f658bd(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.AbstractTransitionSceneSlideIn$1 -> info.u250.a.b.e.d:
    info.u250.c2d.engine.transitions.AbstractTransitionSceneSlideIn this$0 -> a
    com.badlogic.gdx.math.Vector3 val$positionBak -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.SplitAccessor -> info.u250.a.b.e.e:
    boolean $assertionsDisabled -> a
    int getValues(java.lang.Object,int,float[]) -> a
    void setValues(java.lang.Object,int,float[]) -> b
info.u250.c2d.engine.transitions.SplitTextureRegion -> info.u250.a.b.e.f:
    float split -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion[] incomingRegionOdd -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion[] incomingRegionEven -> c
    int h -> d
    int w -> e
    boolean row -> f
    void render$133aeb() -> a
info.u250.c2d.engine.transitions.TransitionFactory -> info.u250.a.b.e.g:
    int[] $SWITCH_TABLE$info$u250$c2d$engine$CoreProvider$TransitionType -> a
    info.u250.c2d.engine.Transition getTransitionScene(info.u250.c2d.engine.CoreProvider$TransitionType) -> a
    int[] $SWITCH_TABLE$info$u250$c2d$engine$CoreProvider$TransitionType() -> a
info.u250.c2d.engine.transitions.TransitionSceneFade -> info.u250.a.b.e.h:
    info.u250.c2d.graphic.FadeMask mask -> c
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneFade) -> a
    void access$1$37b36d3f(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneFade$1 -> info.u250.a.b.e.i:
    info.u250.c2d.engine.transitions.TransitionSceneFade this$0 -> a
    int val$halfDurationMillis -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneFade$1$1 -> info.u250.a.b.e.j:
    info.u250.c2d.engine.transitions.TransitionSceneFade$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneFadeWhite -> info.u250.a.b.e.k:
    info.u250.c2d.graphic.FadeMask mask -> c
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneFadeWhite) -> a
    void access$1$65506f48(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneFadeWhite$1 -> info.u250.a.b.e.l:
    info.u250.c2d.engine.transitions.TransitionSceneFadeWhite this$0 -> a
    int val$halfDurationMillis -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneFadeWhite$1$1 -> info.u250.a.b.e.m:
    info.u250.c2d.engine.transitions.TransitionSceneFadeWhite$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneFlipHorizontal -> info.u250.a.b.e.n:
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneFlipHorizontal) -> a
    void access$1$33f95b16(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneFlipHorizontal$1 -> info.u250.a.b.e.o:
    info.u250.c2d.engine.transitions.TransitionSceneFlipHorizontal this$0 -> a
    int val$halfDurationMillis -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneFlipHorizontal$1$1 -> info.u250.a.b.e.p:
    info.u250.c2d.engine.transitions.TransitionSceneFlipHorizontal$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneFlipVertical -> info.u250.a.b.e.q:
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneFlipVertical) -> a
    void access$1$1b895f28(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneFlipVertical$1 -> info.u250.a.b.e.r:
    info.u250.c2d.engine.transitions.TransitionSceneFlipVertical this$0 -> a
    int val$halfDurationMillis -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneFlipVertical$1$1 -> info.u250.a.b.e.s:
    info.u250.c2d.engine.transitions.TransitionSceneFlipVertical$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneMoveInBottom -> info.u250.a.b.e.t:
    com.badlogic.gdx.math.Vector3 iniTargetPositionOffset() -> f
info.u250.c2d.engine.transitions.TransitionSceneMoveInLeft -> info.u250.a.b.e.u:
    com.badlogic.gdx.math.Vector3 iniTargetPositionOffset() -> f
info.u250.c2d.engine.transitions.TransitionSceneMoveInRight -> info.u250.a.b.e.v:
    com.badlogic.gdx.math.Vector3 iniTargetPositionOffset() -> f
info.u250.c2d.engine.transitions.TransitionSceneMoveInTop -> info.u250.a.b.e.w:
    com.badlogic.gdx.math.Vector3 iniTargetPositionOffset() -> f
info.u250.c2d.engine.transitions.TransitionSceneRotate -> info.u250.a.b.e.x:
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneRotate) -> a
    void access$1$365b31c0(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneRotate$1 -> info.u250.a.b.e.y:
    info.u250.c2d.engine.transitions.TransitionSceneRotate this$0 -> a
    int val$halfDurationMillis -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneRotate$1$1 -> info.u250.a.b.e.z:
    info.u250.c2d.engine.transitions.TransitionSceneRotate$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneRotateWithZoomIn -> info.u250.a.b.e.aa:
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneRotateWithZoomIn) -> a
    void access$1$383c78de(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneRotateWithZoomIn$1 -> info.u250.a.b.e.ab:
    info.u250.c2d.engine.transitions.TransitionSceneRotateWithZoomIn this$0 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneRotateWithZoomIn$1$1 -> info.u250.a.b.e.ac:
    info.u250.c2d.engine.transitions.TransitionSceneRotateWithZoomIn$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneSlideInBottom -> info.u250.a.b.e.ad:
    com.badlogic.gdx.math.Vector3 targetPositionOffset() -> f
    com.badlogic.gdx.math.Vector3 orgiPosition() -> g
info.u250.c2d.engine.transitions.TransitionSceneSlideInLeft -> info.u250.a.b.e.ae:
    com.badlogic.gdx.math.Vector3 targetPositionOffset() -> f
    com.badlogic.gdx.math.Vector3 orgiPosition() -> g
info.u250.c2d.engine.transitions.TransitionSceneSlideInRight -> info.u250.a.b.e.af:
    com.badlogic.gdx.math.Vector3 targetPositionOffset() -> f
    com.badlogic.gdx.math.Vector3 orgiPosition() -> g
info.u250.c2d.engine.transitions.TransitionSceneSlideInTop -> info.u250.a.b.e.ag:
    com.badlogic.gdx.math.Vector3 targetPositionOffset() -> f
    com.badlogic.gdx.math.Vector3 orgiPosition() -> g
info.u250.c2d.engine.transitions.TransitionSceneSplitCols -> info.u250.a.b.e.ah:
    info.u250.c2d.engine.transitions.SplitTextureRegion splitWindow -> c
    int halfDurationMillis -> g
    int loop -> d
    com.badlogic.gdx.graphics.g2d.TextureRegion incomingTextureRegion -> e
    com.badlogic.gdx.graphics.g2d.TextureRegion outgoingTextureRegion -> f
    void doTransition$13462e() -> c
    void render(float) -> b
    void reset() -> d
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneSplitCols) -> a
    void access$1$32923d28(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneSplitCols$1 -> info.u250.a.b.e.ai:
    info.u250.c2d.engine.transitions.TransitionSceneSplitCols this$0 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneSplitRows -> info.u250.a.b.e.aj:
    info.u250.c2d.engine.transitions.SplitTextureRegion splitWindow -> c
    int halfDurationMillis -> g
    int loop -> d
    com.badlogic.gdx.graphics.g2d.TextureRegion incomingTextureRegion -> e
    com.badlogic.gdx.graphics.g2d.TextureRegion outgoingTextureRegion -> f
    void doTransition$13462e() -> c
    void render(float) -> b
    void reset() -> d
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneSplitRows) -> a
    void access$1$5e75727e(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneSplitRows$1 -> info.u250.a.b.e.ak:
    info.u250.c2d.engine.transitions.TransitionSceneSplitRows this$0 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneZoomIn -> info.u250.a.b.e.al:
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneZoomIn) -> a
    void access$1$5550eb23(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneZoomIn$1 -> info.u250.a.b.e.am:
    info.u250.c2d.engine.transitions.TransitionSceneZoomIn this$0 -> a
    int val$halfDurationMillis -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneZoomIn$1$1 -> info.u250.a.b.e.an:
    info.u250.c2d.engine.transitions.TransitionSceneZoomIn$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneZoomOut -> info.u250.a.b.e.ao:
    void doTransition$13462e() -> c
    void render(float) -> b
    info.u250.c2d.engine.Scene access$0(info.u250.c2d.engine.transitions.TransitionSceneZoomOut) -> a
    void access$1$28ccbaa6(info.u250.c2d.engine.Scene) -> b
info.u250.c2d.engine.transitions.TransitionSceneZoomOut$1 -> info.u250.a.b.e.ap:
    info.u250.c2d.engine.transitions.TransitionSceneZoomOut this$0 -> a
    int val$halfDurationMillis -> b
    void onEvent$7fab59b3() -> a
info.u250.c2d.engine.transitions.TransitionSceneZoomOut$1$1 -> info.u250.a.b.e.aq:
    info.u250.c2d.engine.transitions.TransitionSceneZoomOut$1 this$1 -> a
    void onEvent$7fab59b3() -> a
info.u250.c2d.graphic.AdControl -> info.u250.a.c.a:
    void show() -> a
    void hide() -> b
info.u250.c2d.graphic.AdvanceSprite -> info.u250.a.c.b:
    boolean visible -> d
    com.badlogic.gdx.graphics.g2d.Sprite[] shadows -> e
    int shadowNumber -> f
    float shadowInterval -> g
    float deltaAppender -> h
    boolean shadow -> i
    com.badlogic.gdx.utils.Array catchPoints -> j
    com.badlogic.gdx.math.Vector2 vTmp -> r
    void render(float) -> b
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> a
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> a
    void shadowRender(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> b
info.u250.c2d.graphic.AnimationSprite -> info.u250.a.c.c:
    boolean stop -> d
    info.u250.c2d.graphic.AnimationSprite$AnimationSpriteData data -> e
    info.u250.c2d.graphic.AnimationSprite$AnimationSpriteListener l -> f
    int[] $SWITCH_TABLE$info$u250$c2d$graphic$AnimationSprite$AnimationMode -> g
    void flip(boolean,boolean) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion[] keyFramesFromTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String) -> a
    void render(float) -> b
    void justDraw() -> v
    int[] $SWITCH_TABLE$info$u250$c2d$graphic$AnimationSprite$AnimationMode() -> w
info.u250.c2d.graphic.AnimationSprite$AnimationMode -> info.u250.a.c.d:
    info.u250.c2d.graphic.AnimationSprite$AnimationMode JUSTLOOP -> a
    info.u250.c2d.graphic.AnimationSprite$AnimationMode LOOPWITHTIMES -> b
    info.u250.c2d.graphic.AnimationSprite$AnimationMode[] ENUM$VALUES -> c
    info.u250.c2d.graphic.AnimationSprite$AnimationMode[] values() -> values
    info.u250.c2d.graphic.AnimationSprite$AnimationMode valueOf(java.lang.String) -> valueOf
info.u250.c2d.graphic.AnimationSprite$AnimationSpriteData -> info.u250.a.c.e:
    int loopTimes -> a
    int waitingIndex -> b
    boolean mutiDuration -> c
    float[] frameDurations -> d
    float timeLoopOnceDuration -> e
    float sync_frame_stateTime -> f
    com.badlogic.gdx.graphics.g2d.TextureRegion[] keyFrames -> g
    float frameDuration -> h
    info.u250.c2d.graphic.AnimationSprite$AnimationMode mode -> i
    float alphaModulation -> j
    boolean lastFrame -> k
info.u250.c2d.graphic.AnimationSprite$AnimationSpriteListener -> info.u250.a.c.f:
info.u250.c2d.graphic.C2dFps -> info.u250.a.c.g:
info.u250.c2d.graphic.C2dStage -> info.u250.a.c.h:
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    void act(float) -> a
info.u250.c2d.graphic.FadeMask -> info.u250.a.c.i:
    float transparency -> a
    com.badlogic.gdx.graphics.Color color -> b
    float getTransparency() -> a
    void setTransparency(float) -> a
    void render$133aeb() -> b
info.u250.c2d.graphic.parallax.ParallaxGroup -> info.u250.a.c.a.a:
    info.u250.c2d.engine.C2dCamera camera -> d
    com.badlogic.gdx.math.Vector2 speed -> e
    info.u250.c2d.graphic.parallax.ParallaxGroup$ParallaxGroupGestureListener controller -> f
    info.u250.c2d.graphic.parallax.ParallaxLayer$ParallaxLayerResult tempParallaxLayerResult -> g
    void render(float) -> a
info.u250.c2d.graphic.parallax.ParallaxGroup$ParallaxGroupGestureListener -> info.u250.a.c.a.b:
info.u250.c2d.graphic.parallax.ParallaxLayer -> info.u250.a.c.a.c:
    info.u250.c2d.graphic.parallax.ParallaxLayer$ParallaxLayerDrawable drawable -> a
    com.badlogic.gdx.math.Vector2 parallaxRatio -> b
    com.badlogic.gdx.math.Vector2 startPosition -> c
    com.badlogic.gdx.math.Vector2 padding -> d
    int loopX -> e
    int loopY -> f
    java.lang.String name -> g
info.u250.c2d.graphic.parallax.ParallaxLayer$ParallaxLayerDrawable -> info.u250.a.c.a.d:
    float obtainWidth() -> a
    float obtainHeight() -> b
    void renderLayer$7f54ad6a(float,info.u250.c2d.engine.C2dCamera,info.u250.c2d.graphic.parallax.ParallaxLayer$ParallaxLayerResult) -> a
info.u250.c2d.graphic.parallax.ParallaxLayer$ParallaxLayerResult -> info.u250.a.c.a.e:
    float resultX -> a
    float resultY -> b
    java.lang.String toString() -> toString
info.u250.c2d.graphic.parallax.SpriteParallaxLayerDrawable -> info.u250.a.c.a.f:
    com.badlogic.gdx.graphics.g2d.Sprite object -> a
    float obtainWidth() -> a
    float obtainHeight() -> b
    void renderLayer$7f54ad6a(float,info.u250.c2d.engine.C2dCamera,info.u250.c2d.graphic.parallax.ParallaxLayer$ParallaxLayerResult) -> a
info.u250.c2d.input.SimpleDirectionGestureDetector -> info.u250.a.d.a:
info.u250.c2d.input.SimpleDirectionGestureDetector$DirectionGestureListener -> info.u250.a.d.b:
    info.u250.c2d.input.SimpleDirectionGestureDetector$DirectionListener directionListener -> a
    boolean fling(float,float,int) -> a
info.u250.c2d.input.SimpleDirectionGestureDetector$DirectionListener -> info.u250.a.d.c:
    void onLeft() -> a
    void onRight() -> b
    void onUp() -> c
    void onDown() -> d
info.u250.c2d.physical.box2d.Cb2Object -> info.u250.a.e.a.a:
    info.u250.c2d.physical.box2d.loader.cbt.data.BodyData data -> a
    info.u250.c2d.graphic.AdvanceSprite object -> b
    boolean visiable -> d
    boolean resizeObject -> e
    com.badlogic.gdx.math.Vector2 offset -> c
    info.u250.c2d.physical.box2d.Cb2Object setPosition(float,float) -> a
    info.u250.c2d.physical.box2d.Cb2Object setRotation(float) -> a
    void dispose() -> d
info.u250.c2d.physical.box2d.Cb2World -> info.u250.a.e.a.b:
    com.badlogic.gdx.physics.box2d.World world -> a
    info.u250.c2d.physical.box2d.Cb2World instance -> b
    info.u250.c2d.physical.box2d.Cb2World getInstance() -> a
    com.badlogic.gdx.physics.box2d.World world() -> b
    void update(float) -> a_
    void dispose() -> d
info.u250.c2d.physical.box2d.loader.cbt.data.BodyData -> info.u250.a.e.a.a.a.a.a:
    com.badlogic.gdx.physics.box2d.Body body -> a
info.u250.c2d.updatable.PeriodUpdatable -> info.u250.a.f.a:
    float duration -> a
    boolean start -> b
    void go() -> a
    boolean isStart() -> b
info.u250.c2d.updatable.ShakeCameraEvent -> info.u250.a.f.b:
    float shakeDurationCounter -> c
    int shakeTimes -> g
    float amplitude -> d
    float period -> e
    info.u250.c2d.engine.C2dCamera camera -> f
    float syncAmplitude -> h
    void update(float) -> a_
    void go() -> a
    java.lang.String toString() -> toString
info.u250.snakeonaplane.Loading -> info.u250.snakeonaplane.a:
    info.u250.snakeonaplane.LoadingFeedback feedback -> c
    void inLoadingRender(float) -> a
    void finishLoadingCleanup() -> a
info.u250.snakeonaplane.LoadingFeedback -> info.u250.snakeonaplane.b:
    void finish() -> a
info.u250.snakeonaplane.LoadingFeedbackAndroid -> info.u250.snakeonaplane.c:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity main -> a
    void finish() -> a
info.u250.snakeonaplane.LoadingFeedbackAndroid$1 -> info.u250.snakeonaplane.d:
    info.u250.snakeonaplane.LoadingFeedbackAndroid this$0 -> a
    void run() -> run
info.u250.snakeonaplane.LoadingProgressAndroid -> info.u250.snakeonaplane.e:
    android.app.ProgressDialog pDialog -> a
    android.os.Handler handler -> b
    void hideLoading() -> a
info.u250.snakeonaplane.LoadingProgressAndroid$1 -> info.u250.snakeonaplane.f:
    info.u250.snakeonaplane.LoadingProgressAndroid this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
info.u250.snakeonaplane.SnakeOnAPlane -> info.u250.snakeonaplane.g:
    info.u250.c2d.graphic.AdControl adControl -> a
    info.u250.snakeonaplane.scene.PlatformFiles platformFiles -> b
    info.u250.snakeonaplane.LoadingFeedback loadingFeedback -> c
    info.u250.c2d.engine.EngineDrive onSetupEngineDrive() -> g
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity -> info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity:
    android.widget.RelativeLayout layout -> l
    info.u250.snakeonaplane.LoadingProgressAndroid loadingView -> o
    com.google.ads.AdView adView -> m
    int SHOW_ADS -> p
    int HIDE_ADS -> q
    android.os.Handler handler -> n
    info.u250.snakeonaplane.LoadingProgressAndroid getLoadingView() -> e
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$1 -> info.u250.snakeonaplane.h:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$2 -> info.u250.snakeonaplane.i:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity this$0 -> a
    void show() -> a
    void hide() -> b
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3 -> info.u250.snakeonaplane.j:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity this$0 -> a
    void showLevelDialog(info.u250.snakeonaplane.scene.PlatformFiles$LevelDialogEvents) -> a
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3$1 -> info.u250.snakeonaplane.k:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3 this$1 -> a
    info.u250.snakeonaplane.scene.PlatformFiles$LevelDialogEvents val$callback -> b
    void run() -> run
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3$1$1 -> info.u250.snakeonaplane.l:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3$1 this$2 -> a
    info.u250.snakeonaplane.scene.PlatformFiles$LevelDialogEvents val$callback -> b
    android.app.AlertDialog val$dlg -> c
    void onClick(android.view.View) -> onClick
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3$1$2 -> info.u250.snakeonaplane.m:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3$1 this$2 -> a
    info.u250.snakeonaplane.scene.PlatformFiles$LevelDialogEvents val$callback -> b
    android.app.AlertDialog val$dlg -> c
    void onClick(android.view.View) -> onClick
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3$1$3 -> info.u250.snakeonaplane.n:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$3$1 this$2 -> a
    info.u250.snakeonaplane.scene.PlatformFiles$LevelDialogEvents val$callback -> b
    android.app.AlertDialog val$dlg -> c
    void onClick(android.view.View) -> onClick
info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity$4 -> info.u250.snakeonaplane.o:
    info.u250.snakeonaplane.SnakeOnAPlaneAndroidActivity this$0 -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
info.u250.snakeonaplane.SnakeOnAPlaneEngineDrive -> info.u250.snakeonaplane.p:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane game -> a
    info.u250.snakeonaplane.scene.SceneMain home -> b
    void onResourcesRegister(info.u250.c2d.engine.resources.AliasResourceManager) -> a
    void dispose() -> d
    info.u250.c2d.engine.EngineDrive$EngineOptions onSetupEngine() -> a
    void onLoadedResourcesCompleted() -> b
info.u250.snakeonaplane.SnakeOnAPlaneEngineDrive$1 -> info.u250.snakeonaplane.q:
    info.u250.snakeonaplane.SnakeOnAPlaneEngineDrive this$0 -> a
    void onEvent$70d3b1d5() -> a
info.u250.snakeonaplane.SnakeOnAPlaneEngineDrive$2 -> info.u250.snakeonaplane.r:
    info.u250.snakeonaplane.SnakeOnAPlaneEngineDrive this$0 -> a
    void onEvent$70d3b1d5() -> a
info.u250.snakeonaplane.scene.LevelTools -> info.u250.snakeonaplane.a.a:
    com.badlogic.gdx.Preferences preferences -> a
    boolean isLevelFinish(int) -> a
    void setLevelFinish(int) -> b
info.u250.snakeonaplane.scene.PlatformFiles -> info.u250.snakeonaplane.a.b:
    void showLevelDialog(info.u250.snakeonaplane.scene.PlatformFiles$LevelDialogEvents) -> a
info.u250.snakeonaplane.scene.PlatformFiles$LevelDialogEvents -> info.u250.snakeonaplane.a.c:
    void pre() -> a
    void menu() -> b
    void next() -> c
info.u250.snakeonaplane.scene.SceneMain -> info.u250.snakeonaplane.a.d:
    com.badlogic.gdx.scenes.scene2d.ui.Image splash -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image title -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image head -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image start -> d
    info.u250.c2d.graphic.AnimationSprite green -> e
    info.u250.c2d.graphic.AnimationSprite red -> f
    info.u250.c2d.graphic.AnimationSprite blue -> g
    void update(float) -> a_
    void render(float) -> b
    void show() -> h_
    com.badlogic.gdx.InputProcessor getInputProcessor() -> i_
    boolean keyDown(int) -> a
info.u250.snakeonaplane.scene.SceneMain$1 -> info.u250.snakeonaplane.a.e:
    info.u250.snakeonaplane.scene.SceneMain this$0 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane -> info.u250.snakeonaplane.a.f:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD hud -> E
    boolean running -> a
    long lastUpdate -> b
    int[][] snake -> c
    byte[] map -> d
    int fall -> e
    boolean falling -> f
    boolean leaving -> g
    boolean acting -> h
    int length -> i
    boolean restart -> j
    boolean complete -> k
    int count -> l
    int level -> m
    int pCount -> n
    int moves -> o
    int gravity -> p
    float xoffset -> q
    float screenHeight -> r
    com.badlogic.gdx.graphics.g2d.Sprite wall -> s
    info.u250.c2d.graphic.AnimationSprite pellet -> t
    com.badlogic.gdx.graphics.g2d.Sprite exit -> u
    info.u250.c2d.graphic.AnimationSprite white_pellet -> v
    com.badlogic.gdx.graphics.g2d.Sprite sticky -> w
    info.u250.c2d.graphic.AnimationSprite teleport_in -> x
    info.u250.c2d.graphic.AnimationSprite teleport_out -> y
    info.u250.c2d.graphic.AnimationSprite red_pellet -> z
    com.badlogic.gdx.graphics.g2d.Sprite gravity_switch -> A
    info.u250.c2d.graphic.AdvanceSprite head -> B
    com.badlogic.gdx.graphics.g2d.Sprite body -> C
    com.badlogic.gdx.graphics.g2d.Sprite grid -> D
    void update(float) -> a_
    void render(float) -> b
    void show() -> h_
    void restart() -> c
    com.badlogic.gdx.InputProcessor getInputProcessor() -> i_
    void access$0(info.u250.snakeonaplane.scene.SceneSnakeOnAPlane) -> a
    void access$1(info.u250.snakeonaplane.scene.SceneSnakeOnAPlane,int) -> a
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$1 -> info.u250.snakeonaplane.a.g:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane this$0 -> a
    void pre() -> a
    void next() -> c
    void menu() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$2 -> info.u250.snakeonaplane.a.h:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane this$0 -> a
    boolean keyDown(int) -> a
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$3 -> info.u250.snakeonaplane.a.i:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane this$0 -> a
    void onUp() -> c
    void onRight() -> b
    void onLeft() -> a
    void onDown() -> d
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD -> info.u250.snakeonaplane.a.j:
    com.badlogic.gdx.scenes.scene2d.ui.Table levelContainer -> h
    com.badlogic.gdx.scenes.scene2d.ui.Image left -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image right -> b
    com.badlogic.gdx.scenes.scene2d.ui.Image up -> c
    com.badlogic.gdx.scenes.scene2d.ui.Image down -> d
    com.badlogic.gdx.scenes.scene2d.ui.Image menu -> e
    com.badlogic.gdx.scenes.scene2d.Group menuGroup -> f
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane this$0 -> g
    void hideMenu() -> h
    void access$0(info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table access$1(info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD) -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$1 -> info.u250.snakeonaplane.a.k:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void run() -> run
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$10 -> info.u250.snakeonaplane.a.l:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    int val$this_level -> b
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$10$1 -> info.u250.snakeonaplane.a.m:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$10 this$2 -> a
    void run() -> run
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$2 -> info.u250.snakeonaplane.a.n:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$3 -> info.u250.snakeonaplane.a.o:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$4 -> info.u250.snakeonaplane.a.p:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$5 -> info.u250.snakeonaplane.a.q:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$6 -> info.u250.snakeonaplane.a.r:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$7 -> info.u250.snakeonaplane.a.s:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$8 -> info.u250.snakeonaplane.a.t:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD$9 -> info.u250.snakeonaplane.a.u:
    info.u250.snakeonaplane.scene.SceneSnakeOnAPlane$HUD this$1 -> a
    void clicked$43069389() -> b
